{
  "hash": "dbff21d0ec445709361160046a64884c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Visualización de Datos con Python\ndate: 2025-05-10  # Actualizado a la fecha actual\ntags:\n  - Visualización de datos\n  - Python\n  - Matplotlib\n  - Gráficos\n  - Estadística\ncopyrightnotice: 2025\ncopyrightext: Todos los derechos reservados\n# image: featured.jpg\nsubtitle: Técnicas y Ejemplos de Gráficos para Análisis de Datos\nshorttitle: Visualización con Python\nabstract: Este documento presenta una colección de ejemplos prácticos de visualización de datos utilizando Python y la biblioteca Matplotlib. Se incluyen gráficos de líneas, barras, histogramas, circulares, de caja y combinados, cada uno acompañado de código comentado y optimizado. El objetivo es proporcionar una guía educativa para estudiantes y profesionales interesados en representar datos de manera clara y efectiva, con énfasis en buenas prácticas de diseño y presentación.\nkeywords:\n  - Visualización de datos\n  - Python\n  - Matplotlib\n  - Gráficos estadísticos\n  - Análisis de datos\ncategories:\n  - Programación\n  - Visualización de Datos\n  - Estadística\nauthor:\n  - name: Elmer Achalma\n    url: https://achalmaedison.netlify.app\n    affiliation:\n      name: Universidad Nacional de San Cristóbal de Huamanga\n      department: Economía\n    affiliation-url: https://www.gob.pe/unsch\n    orcid: 0000-0001-6996-3364\n    email: elmer.achalma.09@unsch.edu.pe\n    attributes:\n      corresponding: true\n      equal-contributor: true\n    roles:\n      - Investigación\n      - Programación\n      - Redacción\nauthor-note:\n  disclosures:\n    conflict-of-interest: Los autores no tienen conflictos de intereses que revelar.\n    gratitude: Agradezco a mis maestros por su orientación en el aprendizaje de la programación y visualización de datos, a mis padres por su apoyo constante durante mi formación, y a Dios por la salud y fortaleza para perseguir mis metas. Me comprometo a seguir mejorando mis habilidades en la universidad y en todos los ámbitos, siempre con respeto.\ndescription: Guía práctica de visualización de datos con Python, incluyendo ejemplos de gráficos optimizados con Matplotlib.\neval: true  # Habilitado para procesar el código\ncitation:\n  type: article-journal\n  author: Elmer Achalma\n  pdf-url: https://achalmaedison.netlify.app/blog/posts/2025-05-10-visualizacion-datos-python/index.pdf\ndraft: false\njupyter: python3\n---\n\n# Grafico de lineas\n\n::: {#fda5d713 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Configurar el tamaño de la figura para mejor visualización\n#plt.figure(figsize=(10, 8))\n\n# Datos de consumo de carne bovina (kg por habitante)\nconsumo_bovino = [22.1, 22.1, 23.1, 23.9, 24.6, 21.7, 23.5, 22.0, 22.5, 23.6, 21.7]\nanios_bovino = [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011]\n\n# Datos de consumo de carne porcina (kg por habitante)\nconsumo_porcino = [17.9, 19.4, 19.1, 18.3, 19.3, 22.5, 23.5, 25.0, 24.0, 24.4, 25.6]\nanios_porcino = [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011]\n\n# Graficar consumo de carne bovina con marcadores circulares y línea discontinua\nplt.plot(anios_bovino, consumo_bovino, marker='o', linestyle='--', color='red', label='Carne Bovina')\n\n# Graficar consumo de carne porcina con marcadores de diamante y línea discontinua\nplt.plot(anios_porcino, consumo_porcino, marker='d', linestyle='--', color='blue', label='Carne Porcina')\n\n# Etiquetas de los ejes y título con formato adecuado\nplt.xlabel('Año')\nplt.ylabel('Consumo (kg por habitante)')\nplt.title('Consumo Anual de Carne en Chile (2001-2011)')\n\n# Añadir leyenda en la esquina inferior derecha\nplt.legend(loc='lower right')\n\n# Configurar marcas en el eje x para mostrar cada año\nplt.xticks(anios_bovino)\n\n# Añadir una cuadrícula para mejorar la legibilidad\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Ajustar el diseño para evitar recortes de etiquetas\nplt.tight_layout()\n\n# Guardar la figura en un archivo (opcional, se puede descomentar para usar)\n# plt.savefig('consumo_carne_chile.png')\n\n# Mostrar el gráfico\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){}\n:::\n:::\n\n\n::: {#903c1bb9 .cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2 * np.pi, 200)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\n::: {#cell-fig-polar .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![A line plot on a polar axis](index_files/figure-html/fig-polar-output-1.png){#fig-polar}\n:::\n:::\n\n\n# Gráfico de barras\n## horizontal\n\n::: {#88a6b6ea .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Configurar el tamaño de la figura para una mejor visualización\n#plt.figure(figsize=(10, 8))\n\n# Tipos de legumbres y sus respectivos consumos en kg por habitante en 2001\ntipos_legumbres = [\"Poroto\", \"Lenteja\", \"Garbanzo\", \"Arveja\"]\nconsumo_legumbres = [2.1, 1.0, 0.3, 0.5]\n\n# Crear un gráfico de barras con color personalizado y borde\nplt.bar(tipos_legumbres, consumo_legumbres, color='green', edgecolor='black', alpha=0.7)\n\n# Etiquetas de los ejes y título con formato adecuado\nplt.xlabel('Tipos de Legumbres')\nplt.ylabel('Consumo (kg por habitante)')\nplt.title('Consumo de Legumbres en Chile (2001)')\n\n# Añadir una cuadrícula en el eje y para facilitar la lectura\nplt.grid(True, axis='y', linestyle='--', alpha=0.7)\n\n# Ajustar el diseño para evitar recortes de etiquetas\nplt.tight_layout()\n\n# Guardar la figura en un archivo (opcional, descomentar para usar)\n# plt.savefig('consumo_legumbres_2001.png')\n\n# Mostrar el gráfico\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\n## vertical\n\n::: {#2ff2afe2 .cell execution_count=5}\n``` {.python .cell-code}\n#plt.figure(figsize=[10,8])\n#Consumo de legumbres en el 2001\nlegumbres=[\"Poroto\",\"Lenteja\",\"Garbanzo\",\"Arveja\"]\nconsumo=[2.1, 1.0, 0.3, 0.5]\n\nplt.barh(legumbres,consumo)\n\nplt.ylabel(\"Tipos de legumbre\")\nplt.xlabel(\"Consumo (kg/hab)\")\nplt.title(\"Consumo de Legumbres en el 2001\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){}\n:::\n:::\n\n\n# Histograma\n\n::: {#d8e33b24 .cell execution_count=6}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Configurar el tamaño de la figura para una mejor visualización\n#plt.figure(figsize=(10, 8))\n\n# Datos de niveles de glucosa (mg/dl)\nniveles_glucosa = [52, 54, 55, 57, 56, 57, 54, 59, 60, 57, 52, 62, 64, 68, 64, 72, 77, 80, \n                   76, 79, 81, 85, 88, 84, 89, 92, 85, 92, 94, 93, 92, 99, 100, 105, 106, 107, 109]\n\n# Bordes de los intervalos para el histograma (bins)\nintervalos = [50, 60, 70, 80, 90, 100, 110, 120, 130]\n\n# Crear el histograma con color personalizado y bordes\nplt.hist(niveles_glucosa, bins=intervalos, color='skyblue', edgecolor='black', alpha=0.7)\n\n# Etiquetas de los ejes y título con formato adecuado\nplt.xlabel('Nivel de Glucosa (mg/dl)')\nplt.ylabel('Número de Pacientes')\nplt.title('Distribución de Niveles de Glucosa en Pacientes')\n\n# Añadir una cuadrícula en el eje y para facilitar la lectura\nplt.grid(True, axis='y', linestyle='--', alpha=0.7)\n\n# Ajustar el diseño para evitar recortes de etiquetas\nplt.tight_layout()\n\n# Guardar la figura en un archivo (opcional, descomentar para usar)\n# plt.savefig('distribucion_glucosa.png')\n\n# Mostrar el gráfico\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\n# Grafico circular\n\n::: {#bbd480e2 .cell execution_count=7}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Configurar el tamaño de la figura para una mejor visualización\n#plt.figure(figsize=(10, 8))\n\n# Datos de marcas de autos y sus ventas (en alguna unidad, ej. miles de unidades)\nmarcas_autos = [\"Kia\", \"Toyota\", \"Nissan\", \"Suzuki\", \"Audi\"]\nventas = [10.5, 15.3, 14.2, 16.1, 9.8]\n# Resaltar la primera marca (Kia) ligeramente\nresaltar = [0.1, 0, 0, 0, 0]\n\n# Aplicar un estilo visual predefinido (ggplot)\nplt.style.use(\"ggplot\")\n\n# Crear el gráfico de pastel\nplt.pie(x=ventas, explode=resaltar, labels=marcas_autos, autopct=\"%.2f%%\", shadow=True, startangle=20)\n\n# Asegurar que el gráfico sea circular\nplt.axis=(\"equal\")\n\n# Añadir un título descriptivo\nplt.title(\"Distribución de Ventas de Autos en EE.UU.\")\n\n# Añadir una leyenda en la esquina superior izquierda\nplt.legend(marcas_autos, loc=\"upper left\")\n\n# Ajustar el diseño para evitar recortes\nplt.tight_layout()\n\n# Guardar la figura en un archivo (opcional, descomentar para usar)\n# plt.savefig('ventas_autos_eeuu.png')\n\n# Mostrar el gráfico\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\n# Grafico de Donut\n\n::: {#e760f080 .cell execution_count=8}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Configurar el tamaño de la figura para una mejor visualización\n#plt.figure(figsize=(10, 8))\n\n# Datos de marcas de autos y sus ventas (en alguna unidad, ej. miles de unidades)\nmarcas_autos = [\"Kia\", \"Toyota\", \"Nissan\", \"Suzuki\", \"Audi\"]\nventas = [10.5, 15.3, 14.2, 16.1, 9.8]\n# Resaltar la primera marca (Kia) ligeramente\nresaltar = [0.1, 0, 0, 0, 0]\n\n# Aplicar un estilo visual predefinido (ggplot)\nplt.style.use(\"ggplot\")\n\n# Crear el gráfico de pastel (donut chart)\nplt.pie(ventas, explode=resaltar, labels=marcas_autos, autopct=\"%.2f%%\", shadow=True, startangle=20)\n\n# Asegurar que el gráfico sea circular\nplt.axis=(\"equal\")\n\n# Añadir un título descriptivo\nplt.title(\"Distribución de Ventas de Autos en EE.UU.\")\n\n# Añadir una leyenda en la esquina superior izquierda\nplt.legend(marcas_autos, loc=\"upper left\")\n\n# Añadir un círculo central para crear el efecto de \"donut chart\"\ncirculo_central = plt.Circle(xy=(0, 0), radius=0.75, facecolor=\"white\")\nplt.gca().add_artist(circulo_central)\n\n# Ajustar el diseño para evitar recortes\nplt.tight_layout()\n\n# Guardar la figura en un archivo (opcional, descomentar para usar)\n# plt.savefig('ventas_autos_eeuu_donut.png')\n\n# Mostrar el gráfico\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){}\n:::\n:::\n\n\n# Grafico de cajas\n\n::: {#72df3096 .cell execution_count=9}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Configurar el tamaño de la figura para una mejor visualización\n#plt.figure(figsize=(10, 8))\n\n# Datos de las edades de los alumnos\nedades_alumnos = [12, 13, 12, 17, 16, 15, 14, 15, 15, 16, 14, 12, 15, 16, 14, 12, 16, 17]\n\n# Crear el diagrama de caja con un estilo personalizado\nplt.boxplot(edades_alumnos, vert=True, patch_artist=True, \n            boxprops=dict(facecolor='lightblue', edgecolor='black'),\n            medianprops=dict(color='red'), whiskerprops=dict(color='black'),\n            capprops=dict(color='black'), flierprops=dict(marker='o', color='orange', markersize=8))\n\n# Etiquetas de los ejes y título con formato adecuado\nplt.ylabel('Edad (años)')\nplt.title('Distribución de Edades de Alumnos de Secundaria')\n\n# Añadir una cuadrícula en el eje y para facilitar la lectura\nplt.grid(True, axis='y', linestyle='--', alpha=0.7)\n\n# Configurar las etiquetas del eje x (opcional, ya que solo hay un grupo)\nplt.xticks([1], ['Alumnos'])\n\n# Ajustar el diseño para evitar recortes\nplt.tight_layout()\n\n# Guardar la figura en un archivo (opcional, descomentar para usar)\n# plt.savefig('edades_alumnos_secundaria.png')\n\n# Mostrar el gráfico\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-1.png){}\n:::\n:::\n\n\n# Grafico de barras combinadas\n\n::: {#a4f19ff9 .cell execution_count=10}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Configurar el tamaño de la figura para una mejor visualización\n#plt.figure(figsize=(10, 8))\n\n# Datos de ventas de autos por día (en unidades)\nventas_toyota = [10, 15, 19, 14, 9]\nventas_audi = [15, 25, 27, 24, 28]\ndias = [0, 1, 2, 3, 4]  # Posiciones para los días\nancho_barras = 0.5  # Grosor de las barras\n\n# Crear el gráfico de barras apiladas\nbarras_toyota = plt.bar(dias, ventas_toyota, ancho_barras, label='Toyota', color='skyblue', edgecolor='black')\nbarras_audi = plt.bar(dias, ventas_audi, ancho_barras, bottom=ventas_toyota, label='Audi', color='salmon', edgecolor='black')\n\n# Configurar las etiquetas del eje x con los días\nplt.xticks(dias, ['Día 1', 'Día 2', 'Día 3', 'Día 4', 'Día 5'])\n\n# Etiquetas de los ejes y título con formato adecuado\nplt.xlabel('Días')\nplt.ylabel('Unidades Vendidas')\nplt.title('Ventas de Autos por Día (Toyota vs. Audi)')\n\n# Configurar las marcas del eje y para mayor claridad\nplt.yticks([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50])\n\n# Añadir una cuadrícula en el eje y para facilitar la lectura\nplt.grid(True, axis='y', linestyle='--', alpha=0.7)\n\n# Añadir una leyenda para identificar las marcas\nplt.legend()\n\n# Ajustar el diseño para evitar recortes\nplt.tight_layout()\n\n# Guardar la figura en un archivo (opcional, descomentar para usar)\n# plt.savefig('ventas_autos_toyota_audi.png')\n\n# Mostrar el gráfico\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){}\n:::\n:::\n\n\n# Graficos combinados\n\n::: {#d477371b .cell execution_count=11}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Configurar el tamaño de la figura para una mejor visualización\n#plt.figure(figsize=(10, 8))\n\n# Datos de vacunación proyectada (en número de pacientes)\nvacunacion_proyectada = [250, 120, 270, 560, 450, 280, 550]\n# Datos de vacunación real (en número de pacientes)\nvacunacion_real = [150, 300, 120, 550, 500, 240, 600]\nmeses = [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\"]\n\n# Graficar la vacunación proyectada como una línea con marcadores\nplt.plot(meses, vacunacion_proyectada, marker='d', linestyle='--', color='red', label='Vacunación Proyectada')\n\n# Graficar la vacunación real como barras\nplt.bar(meses, vacunacion_real, color='skyblue', edgecolor='black', alpha=0.7, label='Vacunación Real')\n\n# Etiquetas de los ejes y título con formato adecuado\nplt.xlabel('Meses')\nplt.ylabel('Número de Pacientes Vacunados')\nplt.title('Vacunación Real vs. Proyectada (Enero - Julio)')\n\n# Añadir una leyenda\nplt.legend()\n\n# Añadir una cuadrícula en el eje y para facilitar la lectura\nplt.grid(True, axis='y', linestyle='--', alpha=0.7)\n\n# Ajustar el diseño para evitar recortes\nplt.tight_layout()\n\n# Guardar la figura en un archivo (opcional, descomentar para usar)\n# plt.savefig('vacunacion_real_vs_proyectada.png')\n\n# Mostrar el gráfico\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}