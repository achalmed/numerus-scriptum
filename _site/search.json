[
  {
    "objectID": "ofimatica/2023-06-05-separando-hojas-de-excel-en-documentos-individuales/index.html",
    "href": "ofimatica/2023-06-05-separando-hojas-de-excel-en-documentos-individuales/index.html",
    "title": "Separando Hojas de Excel en documentos individuales",
    "section": "",
    "text": "SEPARAR HOJAS DE EXCEL EN DOCUMENTOS INDIVIDUALES Seguramente en cualquier ocasion les han pedido que deben separar un documento en excel, el cual contiene varias hojas, ya que por facilidad de visualización y trabajo el documento se debe tener de esta manera, pero al final debemos tener documentos individuales para ser enviados por separado o simplemente para darle otro tratamiento. En este articulo aprenderemos a separar ese documento el cual contiene varias hojas y dejarlo en documentos individuales. Para ello solamente debemos ingresar al modo desarrollador en excel y copiar unas lineas de codigo y ejecutar y se realizara automaticamente la separacion. Se deben seguir los siguientes pasos:\n1- Creamos una carpeta donde vamos a guardar el documento el cual vamos a separar. 2- Abrimos el documento y pulsamos las teclas alt+F11. 3- De esta manera se abrirá el modo desarrollador, en la parte izquierda encontramos un icono que dice ver código. damos clic en el y se abrirá una ventana para insertar el código. Copiamos y pegamos el siguiente fragmento de código:\nSub Splitbook()\n'Updateby20140612\nDim xPath As String\nxPath = Application.ActiveWorkbook.Path\nApplication.ScreenUpdating = False\nApplication.DisplayAlerts = False\nFor Each xWs In ThisWorkbook.Sheets\n    xWs.Copy\n    Application.ActiveWorkbook.SaveAs Filename:=xPath & \"\\\" & xWs.Name & \".xlsx\"\n    Application.ActiveWorkbook.Close False\nNext\nApplication.DisplayAlerts = True\nApplication.ScreenUpdating = True\nEnd Sub\n4- Damos clic en el icono Ejecutar Sub el cual lo encontramos en la barra superior con un icono triangular. 5- Inmediatamente se ejecutará el código y vamos a visualizar la carpeta, encontrando las hojas ya separadas en documentos individuales.\nDe esta manera se habrá solucionado esa tarea que tal vez puede resultar tediosa si no conocemos mucho del modo desarrollador en excel.\n\nPublicaciones Similares\nSi te interesó este artículo, te recomendamos que explores otros blogs y recursos relacionados que pueden ampliar tus conocimientos. Aquí te dejo algunas sugerencias:\n\n 01 Introduccion Al Lenguaje Y Editor Vba\n 02 Grabar Y Modificar\n 03 Procedimientos\n 04 Funciones En Vba\n 05 Funciones Condicionales Estructuras Condicionales\n 06 Funciones Iterativas Estructuras Repetitivas O Bucles\n 07 Formularios\n 08 Eventos\n Comando Para Convertir Docx A Odt\n Buscar Reemplazar En Libreoffice\n Anclaje Envoltura Alineacion Y Organizacion De Objetos En Llibreoffice\n Combinando Hojas De Excel Con Vba\n Separando Hojas De Excel En Documentos Individuales\n Por Editar\n\nEsperamos que encuentres estas publicaciones igualmente interesantes y útiles. ¡Disfruta de la lectura!\n\n\n\n\nReutilizaciónCC BY-SA 4.0Cómo citarPor favor, cita este trabajo como:\nAchalma, Edison. 2023. “Separando Hojas de Excel en documentos\nindividuales,” May. https://achalmaedison.netlify.app/ofimatica/2023-06-05-separando-hojas-de-excel-en-documentos-individuales/."
  },
  {
    "objectID": "ofimatica/2023-05-31-combinando-hojas-de-excel-con-vba/index.html",
    "href": "ofimatica/2023-05-31-combinando-hojas-de-excel-con-vba/index.html",
    "title": "Combinando Hojas de Excel",
    "section": "",
    "text": "Sencilla macro en VBA (Visual Basic for Applications) que puedes usar para combinar todas las hojas de varios archivos Excel en un solo libro de trabajo.\n\n\nSub Combinar_hojas()\n\n    Path = \"C:\\Users\\Edison\\OneDrive\\Documentos\\Classroom\\Econometría I\\Bibliografías\\Texto_Damodar N. Gujarati_BOOK\\Data_Gujarati\\Excel Files Gujarati_5 Edicion\\\"\n    Filename = Dir(Path & \"*.xls\")\n    Do While Filename &lt;&gt; \"\"\n    \n        Workbooks.Open Filename:=Path & Filename, ReadOnly:=True\n        For Each Sheet In ActiveWorkbook.Sheets\n            Sheet.Copy After:=ThisWorkbook.Sheets(1)\n        Next Sheet\n        Workbooks(Filename).Close\n        Filename = Dir()\n    Loop\nEnd Sub\n\n\n\n\nPath: Define la ruta del directorio donde se encuentran los archivos Excel que deseas combinar.\nFilename: Utiliza la función Dir para obtener el primer archivo que cumpla con el patrón “*.xls”.\nDo While Loop: Este bucle se ejecuta mientras haya archivos en la carpeta que coincidan con el patrón especificado.\nWorkbooks.Open: Abre cada archivo en modo de solo lectura para evitar modificaciones accidentales.\nFor Each Loop: Copia cada hoja del libro de trabajo abierto en el libro actual después de la primera hoja.\nWorkbooks(Filename).Close: Cierra el archivo después de copiar todas sus hojas.\nFilename = Dir(): Actualiza Filename para el siguiente archivo en la carpeta.\n\n\n\n\n\nAbrir Excel: Abre una nueva hoja de Excel.\nAcceder a VBA: Presiona ALT + F11 para abrir el editor de VBA.\nInsertar Módulo: En el editor, inserta un nuevo módulo (Insert &gt; Module).\nPegar el Código: Copia y pega el código VBA proporcionado en el módulo vacío.\nEjecutar la Macro: Vuelve a Excel, ve a Developer &gt; Macros, selecciona Combinar_hojas y haz clic en Ejecutar.\n\nRecuerda ajustar la ruta Path según la ubicación de tus archivos en tu sistema.\nEste script puede ahorrarte mucho tiempo si trabajas con múltiples archivos de Excel, especialmente en tareas repetitivas como la consolidación de datos para análisis econometría o cualquier otra aplicación donde los datos estén dispersos en varios libros."
  },
  {
    "objectID": "ofimatica/2023-05-31-combinando-hojas-de-excel-con-vba/index.html#código-vba-para-combinar-hojas",
    "href": "ofimatica/2023-05-31-combinando-hojas-de-excel-con-vba/index.html#código-vba-para-combinar-hojas",
    "title": "Combinando Hojas de Excel",
    "section": "",
    "text": "Sub Combinar_hojas()\n\n    Path = \"C:\\Users\\Edison\\OneDrive\\Documentos\\Classroom\\Econometría I\\Bibliografías\\Texto_Damodar N. Gujarati_BOOK\\Data_Gujarati\\Excel Files Gujarati_5 Edicion\\\"\n    Filename = Dir(Path & \"*.xls\")\n    Do While Filename &lt;&gt; \"\"\n    \n        Workbooks.Open Filename:=Path & Filename, ReadOnly:=True\n        For Each Sheet In ActiveWorkbook.Sheets\n            Sheet.Copy After:=ThisWorkbook.Sheets(1)\n        Next Sheet\n        Workbooks(Filename).Close\n        Filename = Dir()\n    Loop\nEnd Sub"
  },
  {
    "objectID": "ofimatica/2023-05-31-combinando-hojas-de-excel-con-vba/index.html#explicación-del-código",
    "href": "ofimatica/2023-05-31-combinando-hojas-de-excel-con-vba/index.html#explicación-del-código",
    "title": "Combinando Hojas de Excel",
    "section": "",
    "text": "Path: Define la ruta del directorio donde se encuentran los archivos Excel que deseas combinar.\nFilename: Utiliza la función Dir para obtener el primer archivo que cumpla con el patrón “*.xls”.\nDo While Loop: Este bucle se ejecuta mientras haya archivos en la carpeta que coincidan con el patrón especificado.\nWorkbooks.Open: Abre cada archivo en modo de solo lectura para evitar modificaciones accidentales.\nFor Each Loop: Copia cada hoja del libro de trabajo abierto en el libro actual después de la primera hoja.\nWorkbooks(Filename).Close: Cierra el archivo después de copiar todas sus hojas.\nFilename = Dir(): Actualiza Filename para el siguiente archivo en la carpeta."
  },
  {
    "objectID": "ofimatica/2023-05-31-combinando-hojas-de-excel-con-vba/index.html#cómo-usar-esta-macro",
    "href": "ofimatica/2023-05-31-combinando-hojas-de-excel-con-vba/index.html#cómo-usar-esta-macro",
    "title": "Combinando Hojas de Excel",
    "section": "",
    "text": "Abrir Excel: Abre una nueva hoja de Excel.\nAcceder a VBA: Presiona ALT + F11 para abrir el editor de VBA.\nInsertar Módulo: En el editor, inserta un nuevo módulo (Insert &gt; Module).\nPegar el Código: Copia y pega el código VBA proporcionado en el módulo vacío.\nEjecutar la Macro: Vuelve a Excel, ve a Developer &gt; Macros, selecciona Combinar_hojas y haz clic en Ejecutar.\n\nRecuerda ajustar la ruta Path según la ubicación de tus archivos en tu sistema.\nEste script puede ahorrarte mucho tiempo si trabajas con múltiples archivos de Excel, especialmente en tareas repetitivas como la consolidación de datos para análisis econometría o cualquier otra aplicación donde los datos estén dispersos en varios libros."
  },
  {
    "objectID": "fundamentos-programacion/2018-06-09-typografia/index.html",
    "href": "fundamentos-programacion/2018-06-09-typografia/index.html",
    "title": "Tipografía en entornos académicos y de programación",
    "section": "",
    "text": "La elección de la tipografía en un proyecto gráfico es crucial para su éxito. Los diseñadores profesionales evitan fuentes problemáticas y optan por aquellas bien diseñadas que garantizan un resultado profesional. En este artículo, compartiré los mejores consejos tipográficos y mi selección de las tipografías esenciales."
  },
  {
    "objectID": "fundamentos-programacion/2018-06-09-typografia/index.html#tipografías-gratuitas",
    "href": "fundamentos-programacion/2018-06-09-typografia/index.html#tipografías-gratuitas",
    "title": "Tipografía en entornos académicos y de programación",
    "section": "Tipografías Gratuitas",
    "text": "Tipografías Gratuitas\nEstas fuentes pueden personalizarse para darle un toque único a tu diseño, pero recuerda que no está permitido revenderlas.\n\nMontserrat – Google Fonts\n\nRubik – Google Fonts\n\nEmberly – Emberly\n\nMorganite – Morganite\n\nAileron – Aileron\n\nSpace Mono – Google Fonts\n\nBotera – Botera\n\nPoppins – Google Fonts\n\nNunito – Google Fonts\n\nNunito Sans – Google Fonts\n\nAlegreya – Google Fonts\n\nAlegreya Sans – Google Fonts\n\nIBM Plex – IBM Plex"
  },
  {
    "objectID": "fundamentos-programacion/2018-06-09-typografia/index.html#características-claves-de-la-tipografía-en-programación",
    "href": "fundamentos-programacion/2018-06-09-typografia/index.html#características-claves-de-la-tipografía-en-programación",
    "title": "Tipografía en entornos académicos y de programación",
    "section": "Características Claves de la Tipografía en Programación",
    "text": "Características Claves de la Tipografía en Programación\n\nUso Intensivo de Símbolos: Claves en la sintaxis de muchos lenguajes (e.g., # en Markdown, &lt;= en comparaciones).\n\nFrecuencia de Números: Se usan más que en textos convencionales.\n\nIndentación y Legibilidad: Fundamental para una buena estructura del código."
  },
  {
    "objectID": "fundamentos-programacion/2018-06-09-typografia/index.html#otf-vs-ttf-cuál-elegir",
    "href": "fundamentos-programacion/2018-06-09-typografia/index.html#otf-vs-ttf-cuál-elegir",
    "title": "Tipografía en entornos académicos y de programación",
    "section": "OTF vs TTF: ¿Cuál elegir?",
    "text": "OTF vs TTF: ¿Cuál elegir?\nLos formatos más comunes de tipografías son:\n\nOTF (Open Type Format): Permite características avanzadas como ligaduras, ideales para programación.\n\nTTF (True Type Format): Más compatible, pero con menos funciones avanzadas.\n\nPara programar, lo ideal es elegir una fuente en OTF con ligaduras, lo que mejora la visualización de los símbolos."
  },
  {
    "objectID": "fundamentos-programacion/2018-06-09-typografia/index.html#las-mejores-tipografías-para-programadores",
    "href": "fundamentos-programacion/2018-06-09-typografia/index.html#las-mejores-tipografías-para-programadores",
    "title": "Tipografía en entornos académicos y de programación",
    "section": "Las Mejores Tipografías para Programadores",
    "text": "Las Mejores Tipografías para Programadores\n\nFira Code Diseñada específicamente para programadores mejora la legibilidad con ligaduras avanzadas.\nMonoid permite la integración con iconos de Font Awesome, ideal para desarrolladores que trabajan con interfaces gráficas.\nIosevka es altamente personalizable, adaptándose a las preferencias del usuario para maximizar la comodidad visual."
  },
  {
    "objectID": "r/2020-06-10-012-que-ofrece-r/index.html",
    "href": "r/2020-06-10-012-que-ofrece-r/index.html",
    "title": "¿Qué nos ofrece R?",
    "section": "",
    "text": "RStudio es una herramienta poderosa que brinda numerosas ventajas para los usuarios. A continuación, destacamos algunas de las funcionalidades que ofrece:\n\nPotente editor de código: RStudio proporciona un entorno de desarrollo integrado (IDE) que cuenta con un editor de código robusto. Este editor permite escribir, editar y ejecutar código de manera eficiente, lo que facilita el trabajo con el lenguaje de programación R.\nGestión del espacio de trabajo: RStudio ofrece características avanzadas para el manejo del espacio de trabajo. Puedes explorar y administrar fácilmente los objetos, variables y funciones utilizados en tu sesión de R, lo que facilita el seguimiento y la organización de tus datos y resultados.\nDepuración y resaltado de sintaxis: La función de depuración de RStudio te permite identificar y corregir errores en tu código de manera eficiente. Además, el resaltado de sintaxis te ayuda a visualizar y comprender mejor la estructura de tu código, lo que facilita su lectura y mantenimiento.\nAutocompletado inteligente: RStudio ofrece una función de autocompletado inteligente, que te sugiere opciones de código a medida que escribes. Esto acelera el proceso de codificación al proporcionar sugerencias contextuales y facilitar la escritura correcta de las funciones y objetos de R.\nInteroperabilidad con otros software y plataformas: RStudio es compatible con una amplia gama de herramientas y plataformas. Puedes integrar fácilmente tus análisis en flujos de trabajo existentes, colaborar con otros profesionales y compartir tus resultados en diferentes formatos, como informes, gráficos interactivos o aplicaciones web.\n\n\n\n\nInterfaz de RStudio: Una poderosa herramienta para el desarrollo en R\n\n\n\n\n\nEn el mundo del análisis de datos y programación en R, los archivos de script (.R) desempeñan un papel fundamental. Estos archivos contienen la secuencia de comandos necesaria para realizar análisis y manipulación de datos de manera sistemática y reproducible.\n\n\n\nDocumentación de tareas: Al escribir nuestros comandos en un archivo de script, estamos creando una documentación detallada de los pasos y procesos utilizados en nuestro análisis. Esto facilita la comprensión y revisión de nuestro trabajo, tanto para nosotros mismos como para otros colaboradores.\nAutomatización de tareas repetitivas: Los archivos de script permiten automatizar tareas que se repiten con frecuencia. Podemos definir una serie de comandos en el archivo y ejecutarlos de forma rápida y eficiente cada vez que sea necesario. Esto ahorra tiempo y reduce la posibilidad de errores.\nEvaluación de cambios: Al tener nuestros comandos en un archivo de script, podemos realizar modificaciones y ajustes en el análisis de manera más ágil. Podemos realizar pruebas y evaluaciones de los cambios sin necesidad de volver a escribir todo el código desde cero. Esto nos brinda flexibilidad y nos permite iterar y mejorar nuestro análisis de manera más eficiente.\n\n\n\n\nLos scripts nos permiten escribir y ejecutar una serie de comandos de manera secuencial, lo que facilita la automatización y reproducción de tareas en nuestros análisis de datos.\nPaso 1: Crear un nuevo archivo de script\nEn primer lugar, abrimos RStudio y creamos un nuevo archivo de script. Para hacer esto, seleccionamos “Archivo” en la barra de menú, luego “Nuevo archivo” y finalmente “Script R”. Esto abrirá un nuevo editor de texto donde podemos escribir nuestro código.\n\n\nPaso 2: Escribir el código en el script\nUna vez que tenemos nuestro archivo de script abierto, podemos comenzar a escribir nuestro código en R. Podemos utilizar cualquier comando o función de R en el script para realizar análisis de datos, manipulación de variables, visualización, entre otros. Es importante asegurarse de que el código esté escrito correctamente y tenga una sintaxis válida.\n\n\n\nMostrar el código\n# Este es un ejemplo de un script básico en R\n\n# Comentario de una línea: los comentarios se utilizan para agregar notas o explicaciones al código\n\n# Variables\nnombre &lt;- \"Juan\" # Variable de tipo texto (cadena de caracteres)\nedad &lt;- 25 # Variable numérica\n\n# Imprimir en la consola\ncat(\"Hola,\", nombre, \"tienes\", edad, \"años.\\n\")\n\n# Operaciones aritméticas\nsuma &lt;- 10 + 5\nresta &lt;- 10 - 5\nmultiplicacion &lt;- 10 * 5\ndivision &lt;- 10 / 5\n\n# Imprimir los resultados\ncat(\"La suma es:\", suma, \"\\n\")\ncat(\"La resta es:\", resta, \"\\n\")\ncat(\"La multiplicación es:\", multiplicacion, \"\\n\")\ncat(\"La división es:\", division, \"\\n\")\n\n\nPaso 3: Ejecutar el script\nUna vez que hemos escrito nuestro código en el archivo de script, podemos ejecutarlo para obtener los resultados deseados. Para hacer esto, podemos utilizar el atajo de teclado “Ctrl + Enter” o simplemente hacer clic en el botón “Ejecutar” en la parte superior del editor de texto.\n\nRStudio ejecutará el código línea por línea y mostrará los resultados en la consola.\n\nPaso 4: Guardar el script\nEs importante guardar regularmente nuestro script para evitar perder nuestro trabajo. Para guardar el archivo de script, seleccionamos “Archivo” en la barra de menú y luego “Guardar” o “Guardar como”.\n\nPodemos elegir una ubicación y un nombre de archivo apropiados para guardar nuestro script.\n\n\nPaso 5: Continuar escribiendo y ejecutando el código\nPodemos continuar escribiendo y ejecutando más código en nuestro script según nuestras necesidades. Podemos agregar nuevas líneas de código, modificar las existentes o eliminar las que ya no necesitamos. Es recomendable guardar el script regularmente a medida que realizamos cambios.\nPaso 6: Exportar los resultados (opcional)\nSi deseamos guardar los resultados de nuestro análisis, podemos exportarlos a archivos o formatos específicos. Por ejemplo, podemos guardar tablas de datos en archivos CSV, gráficos en imágenes o informes en formatos de texto. Esto nos permite compartir y utilizar los resultados fuera de RStudio.\n\nRecuerda que practicar y experimentar con diferentes comandos y funciones en RStudio te ayudará a familiarizarte con el entorno y mejorar tus habilidades de programación en R. ¡Diviértete explorando el mundo del análisis de datos con RStudio!\n\n\n\n\n\nAquí tienes una tabla con algunos atajos de teclado útiles en RStudio para usuarios de Ubuntu Linux:\n\n\n\n\n\n\n\nAcción\nAtajo de teclado\n\n\n\n\nEjecutar el código / selección actual y saltar a la línea siguiente\nCtrl + Enter\n\n\nEjecutar el código / selección actual y no saltar a la línea siguiente\nAlt + Enter\n\n\nEjecutar línea de código\nShift + Enter\n\n\nComentar/descomentar línea de código\nCtrl + Shift + C\n\n\nCopiar línea de código\nCtrl + Shift + D\n\n\nPegar línea de código\nCtrl + Shift + V\n\n\nIr a la línea\nCtrl + G\n\n\nIr al inicio del documento\nCtrl + Home\n\n\nIr al final del documento\nCtrl + End\n\n\nCompletar código\nTab\n\n\nAbrir ayuda\nF1\n\n\nGuardar el archivo actual\nCtrl + S\n\n\nCerrar archivo\nCtrl + W\n\n\nDeshacer\nCtrl + Z\n\n\nRehacer\nCtrl + Y\n\n\nAbrir consola de R\nCtrl + Shift + Enter\n\n\nBuscar en el archivo\nCtrl + F\n\n\nBuscar y reemplazar en el archivo\nCtrl + Shift + F\n\n\nColapsar/expandir bloque de código\nCtrl + Shift +\n\n\nAumentar tamaño de fuente\nCtrl + +\n\n\nDisminuir tamaño de fuente\nCtrl + -\n\n\nNuevo archivo Script R\nShift + Ctrl + N\n\n\nAbrir archivo\nCtrl + O\n\n\nEjecutar todo el script\nCtrl + Alt + R\n\n\nEjecutar el código desde el principio hasta la línea actual\nCtrl + Alt + B\n\n\nEjecutar el código desde la línea actual hasta el final\nCtrl + Alt + E\n\n\nMover el cursor al editor de código fuente\nCtrl + 1\n\n\nMover el cursor a la consola\nCtrl + 2\n\n\nEliminar selección actual\nCtrl + D\n\n\nLimpiar consola\nCtrl + L\n\n\nNavegar por el historial de la consola\narriba/abajo\n\n\nMover la línea de código arriba y abajo (evita el trabajo de copiar y pegar)\nAlt + arriba/abajo\n\n\nInterrumpir el comando en ejecución\nEsc\n\n\n\nEstos atajos de teclado te ayudarán a agilizar tu flujo de trabajo en RStudio en Ubuntu Linux. Recuerda que también puedes personalizar los atajos de teclado según tus preferencias en la sección de configuración de RStudio.\n\n\n\nEl espacio de trabajo en R consiste en todos los objetos que se crean o cargan durante una sesión de R.\n\n\n\nUtiliza el operador de asignación (&lt;-) para crear un objeto de datos. Por ejemplo: mi_objeto &lt;- c(1, 2, 3, 4, 5).\n\n\n\nSelecciona todo el código que contiene los objetos de datos y ejecútalo en la consola de RStudio.\n\n\n\nEl código se evaluará y los objetos de datos se crearán en el espacio de trabajo. Sin embargo, no verás ningún resultado en la consola.\n\n\nLos objetos de datos creados se almacenan en el entorno global, que es parte del espacio de trabajo de R.\n\n\n\nPuedes inspeccionar los objetos de datos haciendo clic sobre ellos en el panel de entorno o en el panel de objetos. Esto abrirá una vista previa del objeto en un nuevo archivo. Ten en cuenta que esta vista previa no afecta los objetos en el espacio de trabajo y se puede cerrar sin perder ninguna información.\n\n\n\n\nEn RStudio, puedes guardar todos los objetos en tu espacio de trabajo en un archivo llamado .Rdata. Esta función te permite almacenar y cargar el espacio de trabajo completo en futuras sesiones de RStudio.\nPara guardar el espacio de trabajo, simplemente ve al menú “Session” y selecciona “Save Workspace As…”. A continuación, elige la ubicación y el nombre de archivo deseados para guardar el archivo .Rdata.\n\nEsta función es especialmente útil cuando trabajas en proyectos largos o cuando deseas retomar tu trabajo en otro momento sin tener que volver a crear o cargar manualmente todos los objetos y configuraciones.\n\nRecuerda que al guardar y cargar el espacio de trabajo, asegúrate de mantener un respaldo de tus archivos en caso de cualquier eventualidad. ¡Disfruta de la conveniencia de mantener tus objetos y configuraciones en tu espacio de trabajo guardado!\n\n\n\n\nPara cargar el espacio de trabajo previamente guardado, sigue estos pasos:\n\nAbre RStudio y ve al menú “Session” en la barra de herramientas superior.\nSelecciona la opción “Cargar” del menú desplegable.\nAparecerá una ventana emergente que te permite buscar el archivo .Rdata que contiene tu espacio de trabajo guardado. Navega hasta la ubicación donde guardaste el archivo.\nSelecciona el archivo .Rdata y haz clic en el botón “Abrir”.\nRStudio cargará automáticamente el archivo y restaurará todos los objetos y sus valores en tu entorno de trabajo actual.\n\n\nUna vez completados estos pasos, podrás acceder a todos los objetos y continuar trabajando con ellos como lo hiciste en la sesión en la que guardaste el espacio de trabajo.\n\n¡Con esta opción de carga, podrás retomar fácilmente tus proyectos anteriores y continuar donde lo dejaste sin tener que volver a crear los objetos desde cero!\n\n\n\n\n\nEl archivo de historial es un archivo de texto que registra todos los comandos ejecutados durante una sesión de RStudio.\n\n\nPuedes ver el historial de comandos ejecutados durante tu sesión de trabajo haciendo clic en la pestaña “History” en la parte superior derecha de la ventana de RStudio. Aquí encontrarás una lista de todos los comandos ejecutados, lo que te permite revisarlos y volver a utilizarlos según sea necesario.\n\n\n\n\nSi deseas guardar tu historial de comandos, puedes hacerlo en cualquier momento durante tu sesión de trabajo. Esto te permitirá acceder a tus comandos previos en futuras sesiones.\nSi deseas guardar tu historial de comandos en RStudio, sigue estos pasos:\n\nEn el panel de superior derecha selecciona la opción “Save History” (Guardar Historial).\nAparecerá una ventana emergente que te permitirá seleccionar la ubicación y el nombre de archivo para guardar tu historial de comandos. El archivo tendrá una extensión .Rhistory por defecto.\nElige la ubicación donde deseas guardar el archivo y asigna un nombre descriptivo para identificarlo fácilmente.\nHaz clic en el botón “Guardar” para guardar el historial de comandos en el archivo seleccionado.\n\n\n\n\n\nEl historial se guarda en un archivo llamado .Rhistory. Puedes reutilizar todo el historial de comandos haciendo clic en el archivo .Rhistory o con el nombre asignado. Luego, puedes copiarlos y pegarlos en tu archivo de script actual.\n\nInserta un código de línea seleccionado de .Rhistory en un archivo de script nuevo.\n\n\n¡Explora y aprovecha al máximo el espacio de trabajo y el historial en RStudio para mejorar tu flujo de trabajo y aprovechar al máximo tus comandos y objetos de datos!"
  },
  {
    "objectID": "r/2020-06-10-012-que-ofrece-r/index.html#beneficios-del-software-rstudio",
    "href": "r/2020-06-10-012-que-ofrece-r/index.html#beneficios-del-software-rstudio",
    "title": "¿Qué nos ofrece R?",
    "section": "",
    "text": "RStudio es una herramienta poderosa que brinda numerosas ventajas para los usuarios. A continuación, destacamos algunas de las funcionalidades que ofrece:\n\nPotente editor de código: RStudio proporciona un entorno de desarrollo integrado (IDE) que cuenta con un editor de código robusto. Este editor permite escribir, editar y ejecutar código de manera eficiente, lo que facilita el trabajo con el lenguaje de programación R.\nGestión del espacio de trabajo: RStudio ofrece características avanzadas para el manejo del espacio de trabajo. Puedes explorar y administrar fácilmente los objetos, variables y funciones utilizados en tu sesión de R, lo que facilita el seguimiento y la organización de tus datos y resultados.\nDepuración y resaltado de sintaxis: La función de depuración de RStudio te permite identificar y corregir errores en tu código de manera eficiente. Además, el resaltado de sintaxis te ayuda a visualizar y comprender mejor la estructura de tu código, lo que facilita su lectura y mantenimiento.\nAutocompletado inteligente: RStudio ofrece una función de autocompletado inteligente, que te sugiere opciones de código a medida que escribes. Esto acelera el proceso de codificación al proporcionar sugerencias contextuales y facilitar la escritura correcta de las funciones y objetos de R.\nInteroperabilidad con otros software y plataformas: RStudio es compatible con una amplia gama de herramientas y plataformas. Puedes integrar fácilmente tus análisis en flujos de trabajo existentes, colaborar con otros profesionales y compartir tus resultados en diferentes formatos, como informes, gráficos interactivos o aplicaciones web.\n\n\n\n\nInterfaz de RStudio: Una poderosa herramienta para el desarrollo en R"
  },
  {
    "objectID": "r/2020-06-10-012-que-ofrece-r/index.html#archivos-de-script-en-r-.r",
    "href": "r/2020-06-10-012-que-ofrece-r/index.html#archivos-de-script-en-r-.r",
    "title": "¿Qué nos ofrece R?",
    "section": "",
    "text": "En el mundo del análisis de datos y programación en R, los archivos de script (.R) desempeñan un papel fundamental. Estos archivos contienen la secuencia de comandos necesaria para realizar análisis y manipulación de datos de manera sistemática y reproducible.\n\n\n\nDocumentación de tareas: Al escribir nuestros comandos en un archivo de script, estamos creando una documentación detallada de los pasos y procesos utilizados en nuestro análisis. Esto facilita la comprensión y revisión de nuestro trabajo, tanto para nosotros mismos como para otros colaboradores.\nAutomatización de tareas repetitivas: Los archivos de script permiten automatizar tareas que se repiten con frecuencia. Podemos definir una serie de comandos en el archivo y ejecutarlos de forma rápida y eficiente cada vez que sea necesario. Esto ahorra tiempo y reduce la posibilidad de errores.\nEvaluación de cambios: Al tener nuestros comandos en un archivo de script, podemos realizar modificaciones y ajustes en el análisis de manera más ágil. Podemos realizar pruebas y evaluaciones de los cambios sin necesidad de volver a escribir todo el código desde cero. Esto nos brinda flexibilidad y nos permite iterar y mejorar nuestro análisis de manera más eficiente.\n\n\n\n\nLos scripts nos permiten escribir y ejecutar una serie de comandos de manera secuencial, lo que facilita la automatización y reproducción de tareas en nuestros análisis de datos.\nPaso 1: Crear un nuevo archivo de script\nEn primer lugar, abrimos RStudio y creamos un nuevo archivo de script. Para hacer esto, seleccionamos “Archivo” en la barra de menú, luego “Nuevo archivo” y finalmente “Script R”. Esto abrirá un nuevo editor de texto donde podemos escribir nuestro código.\n\n\nPaso 2: Escribir el código en el script\nUna vez que tenemos nuestro archivo de script abierto, podemos comenzar a escribir nuestro código en R. Podemos utilizar cualquier comando o función de R en el script para realizar análisis de datos, manipulación de variables, visualización, entre otros. Es importante asegurarse de que el código esté escrito correctamente y tenga una sintaxis válida.\n\n\n\nMostrar el código\n# Este es un ejemplo de un script básico en R\n\n# Comentario de una línea: los comentarios se utilizan para agregar notas o explicaciones al código\n\n# Variables\nnombre &lt;- \"Juan\" # Variable de tipo texto (cadena de caracteres)\nedad &lt;- 25 # Variable numérica\n\n# Imprimir en la consola\ncat(\"Hola,\", nombre, \"tienes\", edad, \"años.\\n\")\n\n# Operaciones aritméticas\nsuma &lt;- 10 + 5\nresta &lt;- 10 - 5\nmultiplicacion &lt;- 10 * 5\ndivision &lt;- 10 / 5\n\n# Imprimir los resultados\ncat(\"La suma es:\", suma, \"\\n\")\ncat(\"La resta es:\", resta, \"\\n\")\ncat(\"La multiplicación es:\", multiplicacion, \"\\n\")\ncat(\"La división es:\", division, \"\\n\")\n\n\nPaso 3: Ejecutar el script\nUna vez que hemos escrito nuestro código en el archivo de script, podemos ejecutarlo para obtener los resultados deseados. Para hacer esto, podemos utilizar el atajo de teclado “Ctrl + Enter” o simplemente hacer clic en el botón “Ejecutar” en la parte superior del editor de texto.\n\nRStudio ejecutará el código línea por línea y mostrará los resultados en la consola.\n\nPaso 4: Guardar el script\nEs importante guardar regularmente nuestro script para evitar perder nuestro trabajo. Para guardar el archivo de script, seleccionamos “Archivo” en la barra de menú y luego “Guardar” o “Guardar como”.\n\nPodemos elegir una ubicación y un nombre de archivo apropiados para guardar nuestro script.\n\n\nPaso 5: Continuar escribiendo y ejecutando el código\nPodemos continuar escribiendo y ejecutando más código en nuestro script según nuestras necesidades. Podemos agregar nuevas líneas de código, modificar las existentes o eliminar las que ya no necesitamos. Es recomendable guardar el script regularmente a medida que realizamos cambios.\nPaso 6: Exportar los resultados (opcional)\nSi deseamos guardar los resultados de nuestro análisis, podemos exportarlos a archivos o formatos específicos. Por ejemplo, podemos guardar tablas de datos en archivos CSV, gráficos en imágenes o informes en formatos de texto. Esto nos permite compartir y utilizar los resultados fuera de RStudio.\n\nRecuerda que practicar y experimentar con diferentes comandos y funciones en RStudio te ayudará a familiarizarte con el entorno y mejorar tus habilidades de programación en R. ¡Diviértete explorando el mundo del análisis de datos con RStudio!"
  },
  {
    "objectID": "r/2020-06-10-012-que-ofrece-r/index.html#shortcuts",
    "href": "r/2020-06-10-012-que-ofrece-r/index.html#shortcuts",
    "title": "¿Qué nos ofrece R?",
    "section": "",
    "text": "Aquí tienes una tabla con algunos atajos de teclado útiles en RStudio para usuarios de Ubuntu Linux:\n\n\n\n\n\n\n\nAcción\nAtajo de teclado\n\n\n\n\nEjecutar el código / selección actual y saltar a la línea siguiente\nCtrl + Enter\n\n\nEjecutar el código / selección actual y no saltar a la línea siguiente\nAlt + Enter\n\n\nEjecutar línea de código\nShift + Enter\n\n\nComentar/descomentar línea de código\nCtrl + Shift + C\n\n\nCopiar línea de código\nCtrl + Shift + D\n\n\nPegar línea de código\nCtrl + Shift + V\n\n\nIr a la línea\nCtrl + G\n\n\nIr al inicio del documento\nCtrl + Home\n\n\nIr al final del documento\nCtrl + End\n\n\nCompletar código\nTab\n\n\nAbrir ayuda\nF1\n\n\nGuardar el archivo actual\nCtrl + S\n\n\nCerrar archivo\nCtrl + W\n\n\nDeshacer\nCtrl + Z\n\n\nRehacer\nCtrl + Y\n\n\nAbrir consola de R\nCtrl + Shift + Enter\n\n\nBuscar en el archivo\nCtrl + F\n\n\nBuscar y reemplazar en el archivo\nCtrl + Shift + F\n\n\nColapsar/expandir bloque de código\nCtrl + Shift +\n\n\nAumentar tamaño de fuente\nCtrl + +\n\n\nDisminuir tamaño de fuente\nCtrl + -\n\n\nNuevo archivo Script R\nShift + Ctrl + N\n\n\nAbrir archivo\nCtrl + O\n\n\nEjecutar todo el script\nCtrl + Alt + R\n\n\nEjecutar el código desde el principio hasta la línea actual\nCtrl + Alt + B\n\n\nEjecutar el código desde la línea actual hasta el final\nCtrl + Alt + E\n\n\nMover el cursor al editor de código fuente\nCtrl + 1\n\n\nMover el cursor a la consola\nCtrl + 2\n\n\nEliminar selección actual\nCtrl + D\n\n\nLimpiar consola\nCtrl + L\n\n\nNavegar por el historial de la consola\narriba/abajo\n\n\nMover la línea de código arriba y abajo (evita el trabajo de copiar y pegar)\nAlt + arriba/abajo\n\n\nInterrumpir el comando en ejecución\nEsc\n\n\n\nEstos atajos de teclado te ayudarán a agilizar tu flujo de trabajo en RStudio en Ubuntu Linux. Recuerda que también puedes personalizar los atajos de teclado según tus preferencias en la sección de configuración de RStudio."
  },
  {
    "objectID": "r/2020-06-10-012-que-ofrece-r/index.html#espacio-de-trabajo-.rdata",
    "href": "r/2020-06-10-012-que-ofrece-r/index.html#espacio-de-trabajo-.rdata",
    "title": "¿Qué nos ofrece R?",
    "section": "",
    "text": "El espacio de trabajo en R consiste en todos los objetos que se crean o cargan durante una sesión de R.\n\n\n\nUtiliza el operador de asignación (&lt;-) para crear un objeto de datos. Por ejemplo: mi_objeto &lt;- c(1, 2, 3, 4, 5).\n\n\n\nSelecciona todo el código que contiene los objetos de datos y ejecútalo en la consola de RStudio.\n\n\n\nEl código se evaluará y los objetos de datos se crearán en el espacio de trabajo. Sin embargo, no verás ningún resultado en la consola.\n\n\nLos objetos de datos creados se almacenan en el entorno global, que es parte del espacio de trabajo de R.\n\n\n\nPuedes inspeccionar los objetos de datos haciendo clic sobre ellos en el panel de entorno o en el panel de objetos. Esto abrirá una vista previa del objeto en un nuevo archivo. Ten en cuenta que esta vista previa no afecta los objetos en el espacio de trabajo y se puede cerrar sin perder ninguna información.\n\n\n\n\nEn RStudio, puedes guardar todos los objetos en tu espacio de trabajo en un archivo llamado .Rdata. Esta función te permite almacenar y cargar el espacio de trabajo completo en futuras sesiones de RStudio.\nPara guardar el espacio de trabajo, simplemente ve al menú “Session” y selecciona “Save Workspace As…”. A continuación, elige la ubicación y el nombre de archivo deseados para guardar el archivo .Rdata.\n\nEsta función es especialmente útil cuando trabajas en proyectos largos o cuando deseas retomar tu trabajo en otro momento sin tener que volver a crear o cargar manualmente todos los objetos y configuraciones.\n\nRecuerda que al guardar y cargar el espacio de trabajo, asegúrate de mantener un respaldo de tus archivos en caso de cualquier eventualidad. ¡Disfruta de la conveniencia de mantener tus objetos y configuraciones en tu espacio de trabajo guardado!\n\n\n\n\nPara cargar el espacio de trabajo previamente guardado, sigue estos pasos:\n\nAbre RStudio y ve al menú “Session” en la barra de herramientas superior.\nSelecciona la opción “Cargar” del menú desplegable.\nAparecerá una ventana emergente que te permite buscar el archivo .Rdata que contiene tu espacio de trabajo guardado. Navega hasta la ubicación donde guardaste el archivo.\nSelecciona el archivo .Rdata y haz clic en el botón “Abrir”.\nRStudio cargará automáticamente el archivo y restaurará todos los objetos y sus valores en tu entorno de trabajo actual.\n\n\nUna vez completados estos pasos, podrás acceder a todos los objetos y continuar trabajando con ellos como lo hiciste en la sesión en la que guardaste el espacio de trabajo.\n\n¡Con esta opción de carga, podrás retomar fácilmente tus proyectos anteriores y continuar donde lo dejaste sin tener que volver a crear los objetos desde cero!"
  },
  {
    "objectID": "r/2020-06-10-012-que-ofrece-r/index.html#historial-.rhistory",
    "href": "r/2020-06-10-012-que-ofrece-r/index.html#historial-.rhistory",
    "title": "¿Qué nos ofrece R?",
    "section": "",
    "text": "El archivo de historial es un archivo de texto que registra todos los comandos ejecutados durante una sesión de RStudio.\n\n\nPuedes ver el historial de comandos ejecutados durante tu sesión de trabajo haciendo clic en la pestaña “History” en la parte superior derecha de la ventana de RStudio. Aquí encontrarás una lista de todos los comandos ejecutados, lo que te permite revisarlos y volver a utilizarlos según sea necesario.\n\n\n\n\nSi deseas guardar tu historial de comandos, puedes hacerlo en cualquier momento durante tu sesión de trabajo. Esto te permitirá acceder a tus comandos previos en futuras sesiones.\nSi deseas guardar tu historial de comandos en RStudio, sigue estos pasos:\n\nEn el panel de superior derecha selecciona la opción “Save History” (Guardar Historial).\nAparecerá una ventana emergente que te permitirá seleccionar la ubicación y el nombre de archivo para guardar tu historial de comandos. El archivo tendrá una extensión .Rhistory por defecto.\nElige la ubicación donde deseas guardar el archivo y asigna un nombre descriptivo para identificarlo fácilmente.\nHaz clic en el botón “Guardar” para guardar el historial de comandos en el archivo seleccionado.\n\n\n\n\n\nEl historial se guarda en un archivo llamado .Rhistory. Puedes reutilizar todo el historial de comandos haciendo clic en el archivo .Rhistory o con el nombre asignado. Luego, puedes copiarlos y pegarlos en tu archivo de script actual.\n\nInserta un código de línea seleccionado de .Rhistory en un archivo de script nuevo.\n\n\n¡Explora y aprovecha al máximo el espacio de trabajo y el historial en RStudio para mejorar tu flujo de trabajo y aprovechar al máximo tus comandos y objetos de datos!"
  },
  {
    "objectID": "r/2020-06-10-013-lo-que-debemos-saber-de-r/index.html",
    "href": "r/2020-06-10-013-lo-que-debemos-saber-de-r/index.html",
    "title": "Lo que debemos saber de R",
    "section": "",
    "text": "En R, es fundamental comprender los diferentes tipos de datos disponibles. A continuación, exploraremos los tres tipos básicos de datos en R y cómo se utilizan en la programación.\n\n\nLos datos numéricos en R se dividen en dos tipos principales:\n\nNúmeros reales, se conoce como double. Estos son los números más comunes y se utilizan para representar valores decimales. Por ejemplo, 3.14 y 2.71828 son números reales en R. La precisión de los números reales en R depende de la máquina en la que se ejecuta el programa.\nNúmeros enteros, se conoce como integer. Estos son números que no contienen decimales y se utilizan para representar valores enteros. Por ejemplo, 1, 2, -5 son ejemplos de números enteros en R. Los números enteros se utilizan cuando no se requiere precisión decimal.\n\n\n\n\nEl tipo de dato lógico en R se conoce como booleano. Este tipo de dato puede tener uno de dos valores: TRUE o FALSE. Los valores booleanos se utilizan principalmente para realizar operaciones de comparación y evaluación lógica en los programas. Por ejemplo, se puede usar una expresión lógica para verificar si una condición es verdadera o falsa.\n\n\n\nEl tipo de dato carácter en R se utiliza para almacenar letras text y símbolos strings. Los datos de tipo carácter se definen utilizando comillas simples (’‘) o comillas dobles (““). Por ejemplo,”Hola” y ’RStudio’ son ejemplos de datos de tipo carácter en R. Los datos de tipo carácter se utilizan con frecuencia para almacenar texto legible por humanos, como nombres, descripciones o mensajes.\n\nEs importante comprender estos tipos de datos en R, ya que nos permiten manipular y realizar operaciones en los datos de manera adecuada. Cada tipo de dato tiene sus propias características y funciones asociadas que nos permiten realizar tareas específicas en la programación.\n\n\n\n\n\nLas estructuras de datos nos permiten organizar y manipular la información de manera eficiente. A continuación, exploraremos las principales estructuras de datos disponibles en R y cómo se utilizan en la programación.\n\n\nUn escalar es un dato individual, como un número o una palabra, que no está agrupado con otros elementos. En R, los escalares pueden ser de diferentes tipos de datos, como numéricos, lógicos o caracteres. Estos datos se utilizan cuando solo necesitamos almacenar una única observación.\n\n\n\nUn vector es una colección ordenada de elementos del mismo tipo de dato. Puede contener números, valores lógicos o caracteres. En R, los vectores son utilizados para almacenar conjuntos de datos relacionados. Por ejemplo, podemos tener un vector de edades o un vector de nombres. Los vectores son una de las estructuras de datos más utilizadas en R y nos permiten realizar operaciones y cálculos de manera eficiente.\nVectores\nConcatenación de elementos con c(): Se utiliza la función c() para concatenar elementos y crear vectores en R.\n\n\nMostrar el código\nc(0.5, 0.6, 0.25) # números decimales (double)\nc(9L, 10L, 11L, 12L, 13L) # números enteros (integer)\nc(9:13) # secuencia de números enteros (integer sequence)\nc(TRUE, FALSE, FALSE) # valores lógicos (logical)\nc(1 + 0i, 2 + 4i) # números complejos (complex)\nc(\"a\", \"b\", \"c\") # caracteres (character)\n\n\nAcciones con vectores\n\nAsignar los vectores a nombres:\nCreamos un vector llamado “dbl” que contiene los números decimales 0.5, 0.6 y 0.25.\n\n\nMostrar el código\ndbl &lt;- c(0.5, 0.6, 0.25)\n\n\nCreamos un vector llamado “chr” que contiene los caracteres “a”, “b” y “c”.\n\n\nMostrar el código\nchr &lt;- c(\"a\", \"b\", \"c\")\n\n\nImprimir los vectores “dbl” y “chr” en la consola:\nVisualizamos en la consola el contenido del vector “dbl”, que son los números decimales 0.5, 0.6 y 0.25.\n\n\nMostrar el código\ndbl\n\n\nVisualizamos en la consola el contenido del vector “chr”, que son los caracteres “a”, “b” y “c”.\n\n\nMostrar el código\nchr\n\n\nVerificar el número de elementos en “dbl” y “chr”:\nCalculamos y mostramos en la consola la longitud del vector “dbl”, que es 3.\n\n\nMostrar el código\nlength(dbl)\n\n\nCalculamos y mostramos en la consola la longitud del vector “chr”, que es 3.\n\n\nMostrar el código\nlength(chr)\n\n\nVerificar el tipo de dato de “dbl” y “chr”:\nVisualizamos en la consola el tipo de dato del vector “dbl”, que es “double” (números decimales).\n\n\nMostrar el código\ntypeof(dbl)\n\n\nVisualizamos en la consola el tipo de dato del vector “chr”, que es “character” (caracteres).\n\n\nMostrar el código\ntypeof(chr)\n\n\nCombinar dos vectores:\nSe puede combinar el vector “dbl” consigo mismo utilizando la función “c()”, creando un nuevo vector que contiene los elementos duplicados del vector original.\n\n\nMostrar el código\nc(dbl, dbl)\n\n\nTambien se puede combina el vector “dbl” con el vector “chr” utilizando la función “c()”, creando un nuevo vector que contiene los elementos de ambos vectores concatenados.\n\n\nMostrar el código\nc(dbl, chr)\n\n\n\n\n\n\n\n\n\nNota\n\n\n\nEl cambio automático del tipo de datos del vector resultante se denomina coerción. La coerción garantiza que se mantiene el mismo tipo de datos para cada elemento del vector.\n\n\nOperaciones aritméticas con vectores\n\nDefinamos dos nuevos vectores numéricos llamados a y b con 4 elementos cada uno:\n\n\nMostrar el código\na &lt;- c(1, 2, 3, 4)\nb &lt;- c(10, 20, 30, 40)\n\n\nRealizamos una multiplicación escalar de a por 5, lo que significa que cada elemento en a se multiplica por 5:\n\n\nMostrar el código\na * 5\n\n\nRealizamos una multiplicación de vectores entre a y b, lo que implica multiplicar cada elemento en a por el elemento correspondiente en b:\n\n\nMostrar el código\na * b\n\n\nCreamos un nuevo vector numérico llamado v con longitud 5.\n\n\nMostrar el código\nv &lt;- c(1.1, 1.2, 1.3, 1.4, 1.5)\na * v\n\n\n\n\n\n\n\n\n\nNota\n\n\n\nLas operaciones aritméticas de los vectores se realizan por elementos. si dos vectores no tienen la misma longitud, el vector más corto se reciclará para que coincida con el más largo (en este caso, se vuelve a utilizar el primer elemento de a).\n\n\n\n\n\nUna matriz es una estructura bidimensional que contiene elementos organizados en filas y columnas. Todos los elementos de una matriz deben ser del mismo tipo de dato. Las matrices son útiles para almacenar datos tabulares, como una tabla de datos con variables en filas y observaciones en columnas. En R, podemos realizar operaciones matriciales y manipular los datos de manera eficiente utilizando esta estructura.\nMatrices\n\nCombinamos los vectores a y b, definidas anteriormente, por columnas utilizando la función cbind():\n\n\nMostrar el código\nA &lt;- cbind(a, b)\nA\n\n\nEsta opción combina los vectores a y b por columnas, creando una matriz A donde los elementos de a forman la primera columna y los elementos de b forman la segunda columna.\nCombinamos los vectores a y b por filas utilizando la función rbind():\n\n\nMostrar el código\nB &lt;- rbind(a, b)\nB\n\n\nEn esta opción, los vectores a y b se combinan por filas para crear una matriz B. Los elementos de a forman la primera fila y los elementos de b forman la segunda fila.\nCreamos una matriz a partir de los elementos de vector a utilizando la función matrix():\n\n\nMostrar el código\nA &lt;- matrix(a, ncol = 2, nrow = 2)\nA\n\n\nAquí se utiliza la función matrix() para crear una matriz A a partir de los elementos del vector a. Se especifica que la matriz tendrá 2 columnas y 2 filas. Los argumentos nrow y ncol indican el número de filas y el número de columnas de que consta la matriz resultante.\nPara 4 elementos y ncol =2 la matriz sólo puede tener 2 filas. Por lo tanto no es necesario especificar ambos argumentos\n\n\nMostrar el código\nA &lt;- matrix(a, ncol = 2)\nA\n\n\nEn esta variante, se crea una matriz A con 2 columnas y se ajusta automáticamente el número de filas según la longitud del vector a.\nPor defecto la matriz se rellena columna a columna (R trata internamente un objeto matriz como vector columna). si la matriz debe rellenarse fila a fila se requiere el argumento byrow = TRUE\n\n\nMostrar el código\nB &lt;- matrix(a, ncol = 2, byrow = TRUE)\nB\n\n\nEn esta opción, se crea una matriz B con 2 columnas y se especifica que los elementos del vector a se distribuirán por filas byrow = TRUE, es decir, los primeros elementos de a formarán la primera fila, los siguientes elementos formarán la segunda fila, y así sucesivamente.\n\nAcciones con matrices\n\nVerificamos el número de filas de la matriz A utilizando la función nrow():\n\n\nMostrar el código\nnrow(A)\n\n\nEsta línea de código devuelve el número de filas de la matriz A.\nVerificamos el número de columnas de la matriz A utilizando la función ncol():\n\n\nMostrar el código\nncol(A)\n\n\nAquí se obtiene el número de columnas de la matriz A.\nVerificamos la dimensión (número de filas y columnas) de la matriz A utilizando la función dim():\n\n\nMostrar el código\ndim(A)\n\n\nEsta línea de código devuelve la dimensión de la matriz A en formato [nrow, ncol].\nCombinamos dos matrices A por columnas utilizando la función cbind() y almacenamos el resultado en D.wide:\n\n\nMostrar el código\nD.wide &lt;- cbind(A, A)\nD.wide\n\n\nEn esta línea se crea una nueva matriz D.wide que combina las matrices A y A por columnas.\nCombinamos dos matrices A por filas utilizando la función rbind() y almacenamos el resultado en D.long:\n\n\nMostrar el código\nD.long &lt;- rbind(A, A)\nD.long\n\n\nAquí se crea una nueva matriz D.long que combina las matrices A y A por filas.\nCombinamos las matrices D.wide y D.long por columnas utilizando la función cbind() y almacenamos el resultado en D:\n\n\nMostrar el código\n# D &lt;- cbind(D.wide, D.long)\n\n\nEn esta línea se crea una nueva matriz D que combina las matrices D.wide y D.long por columnas.\n\nOperaciones aritméticas con matrices\n\nSuma de la matriz B consigo misma utilizando el operador +:\n\n\nMostrar el código\nB + B\n\n\nEsta línea de código realiza la suma de la matriz B con ella misma.\nMultiplicación escalar de la matriz B por 2 utilizando el operador *:\n\n\nMostrar el código\nB * 2\n\n\nAquí se realiza la multiplicación de cada elemento de la matriz B por 2.\nMultiplicación elemento a elemento de la matriz B consigo misma y almacenar el resultado en a:\n\n\nMostrar el código\na &lt;- B * B\na\n\n\nEn esta línea se realiza la multiplicación elemento a elemento de la matriz B con ella misma, y el resultado se almacena en la matriz a.\nMultiplicación de matrices utilizando el operador %*%:\n\n\nMostrar el código\nC &lt;- B %*% B\nC\n\n\nAquí se realiza la multiplicación de matrices entre la matriz B y ella misma, y el resultado se almacena en la matriz C.\n\nOtras operaciones con matrices:\n\nTransposición de la matriz D.wide utilizando la función t():\n\n\nMostrar el código\nt(D.wide)\n\n\nEsta línea de código transpone la matriz D.wide, es decir, intercambia las filas por columnas y viceversa.\nCálculo del determinante de la matriz B utilizando la función det():\n\n\nMostrar el código\ndet(B)\n\n\nAquí se calcula el determinante de la matriz B.\nCálculo de la inversa de la matriz B utilizando la función solve() (solo si el determinante es diferente de 0):\n\n\nMostrar el código\nsolve(B)\n\n\nEn esta línea se calcula la inversa de la matriz B, siempre y cuando el determinante sea diferente de 0.\nCálculo de los valores propios (eigenvalues) de una matriz cuadrada y simétrica utilizando la función eigen():\n\n\nMostrar el código\neigen(B)\n\n\nAquí se calculan los valores propios de la matriz B. Esta operación solo es aplicable a matrices cuadradas y simétricas.\n\n\n\n\nUn data frame es una estructura similar a una matriz, pero más flexible. Puede contener columnas con diferentes tipos de datos, lo que lo hace ideal para almacenar conjuntos de datos heterogéneos. Los data frames son muy utilizados en el análisis de datos, ya que nos permiten manipular y explorar datos de manera eficiente. Podemos realizar operaciones de filtrado, selección y transformación en los data frames para obtener información significativa.\nCreación del data frame:\n\nCreamos vectores con diferentes tipos de datos, como números decimales (dbl), números enteros (int), valores lógicos (lgl) y caracteres (chr):\n\n\nMostrar el código\ndbl &lt;- c(0.5, 0.6, 0.25, 1.2, 0.333) # números decimales (double)\nint &lt;- c(9L, 10L, 11L, 12L, 13L) # números enteros (integer)\nlgl &lt;- c(TRUE, FALSE, FALSE, TRUE, TRUE) # valores lógicos (logical)\nchr &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\") # caracteres (character)\n\n\nCada vector tiene elementos que representan valores de su respectivo tipo de dato.\nUtilizamos la función data.frame() para combinar los vectores en un data frame llamado df:\n\n\nMostrar el código\ndf &lt;- data.frame(dbl, int, lgl, chr)\n\n\nEl data frame df se crea utilizando los vectores dbl, int, lgl y chr como columnas.\nMostamos el contenido del data frame en la consola:\n\n\nMostrar el código\ndf\n\n\nEsto imprime el contenido del data frame df.\n\nAcciones con data frames:\n\nVerificamos el número de filas del data frame utilizando la función nrow():\n\n\nMostrar el código\nnrow(df)\n\n\nEsta línea de código devuelve el número de filas en el data frame df.\nVerificamos el número de columnas del data frame utilizando la función ncol():\n\n\nMostrar el código\nncol(df)\n\n\nAquí se obtiene el número de columnas en el data frame df.\nVerificamos la dimensión (número de filas y columnas) del data frame utilizando la función dim():\n\n\nMostrar el código\ndim(df)\n\n\nEsta línea de código devuelve la dimensión del data frame df en formato [nrow, ncol], es decir, el número de filas y columnas que tiene el data frame.\n\n\n\n\nUna lista es una estructura de datos genérica que puede contener diferentes objetos, como vectores, matrices, data frames o incluso otras listas. A diferencia de las otras estructuras, las listas no tienen restricciones en cuanto a los tipos de datos o la longitud de los componentes individuales. Las listas son muy flexibles y se utilizan cuando necesitamos almacenar objetos de diferentes tipos o estructuras complejas.\nCreación de la lista\n\nCreamos una variable a que contiene un escalar de tipo entero (1L):\n\n\nMostrar el código\na &lt;- 1L\n\n\nCreamos un vector numérico dbl con 5 elementos:\n\n\nMostrar el código\ndbl &lt;- c(0.5, 0.6, 0.25, 1.2, 0.333)\n\n\nCreamos un vector de caracteres chr con 3 elementos:\n\n\nMostrar el código\nchr &lt;- c(\"a\", \"b\", \"c\")\n\n\nCreamos un vector v con 4 elementos de tipo numérico:\n\n\nMostrar el código\nv &lt;- c(1.1, 1.2, 1.3, 1.4)\n\n\nCreamos una matriz mat de tamaño 2x2 a partir del vector v:\n\n\nMostrar el código\nmat &lt;- matrix(v, ncol = 2)\n\n\nLa matriz mat tiene 2 columnas y los elementos del vector v se llenan por columnas.\nCreamos una lista l que contiene los elementos a, dbl, chr y mat:\n\n\nMostrar el código\nl &lt;- list(a, dbl, chr, mat)\n\n\nLa lista l contiene estos elementos en ese orden.\nFinalmente, visualizamos el contenido de la lista en la consola:\n\n\nMostrar el código\nl\n\n\nEsto imprime el contenido de la lista l.\n\n\nEs importante comprender estas estructuras de datos en R, ya que nos permiten organizar y manipular la información de manera efectiva. Cada estructura tiene sus propias características y funciones asociadas que nos facilitan el trabajo con los datos en la programación."
  },
  {
    "objectID": "r/2020-06-10-013-lo-que-debemos-saber-de-r/index.html#tipos-de-datos",
    "href": "r/2020-06-10-013-lo-que-debemos-saber-de-r/index.html#tipos-de-datos",
    "title": "Lo que debemos saber de R",
    "section": "",
    "text": "En R, es fundamental comprender los diferentes tipos de datos disponibles. A continuación, exploraremos los tres tipos básicos de datos en R y cómo se utilizan en la programación.\n\n\nLos datos numéricos en R se dividen en dos tipos principales:\n\nNúmeros reales, se conoce como double. Estos son los números más comunes y se utilizan para representar valores decimales. Por ejemplo, 3.14 y 2.71828 son números reales en R. La precisión de los números reales en R depende de la máquina en la que se ejecuta el programa.\nNúmeros enteros, se conoce como integer. Estos son números que no contienen decimales y se utilizan para representar valores enteros. Por ejemplo, 1, 2, -5 son ejemplos de números enteros en R. Los números enteros se utilizan cuando no se requiere precisión decimal.\n\n\n\n\nEl tipo de dato lógico en R se conoce como booleano. Este tipo de dato puede tener uno de dos valores: TRUE o FALSE. Los valores booleanos se utilizan principalmente para realizar operaciones de comparación y evaluación lógica en los programas. Por ejemplo, se puede usar una expresión lógica para verificar si una condición es verdadera o falsa.\n\n\n\nEl tipo de dato carácter en R se utiliza para almacenar letras text y símbolos strings. Los datos de tipo carácter se definen utilizando comillas simples (’‘) o comillas dobles (““). Por ejemplo,”Hola” y ’RStudio’ son ejemplos de datos de tipo carácter en R. Los datos de tipo carácter se utilizan con frecuencia para almacenar texto legible por humanos, como nombres, descripciones o mensajes.\n\nEs importante comprender estos tipos de datos en R, ya que nos permiten manipular y realizar operaciones en los datos de manera adecuada. Cada tipo de dato tiene sus propias características y funciones asociadas que nos permiten realizar tareas específicas en la programación."
  },
  {
    "objectID": "r/2020-06-10-013-lo-que-debemos-saber-de-r/index.html#estructura-de-datos",
    "href": "r/2020-06-10-013-lo-que-debemos-saber-de-r/index.html#estructura-de-datos",
    "title": "Lo que debemos saber de R",
    "section": "",
    "text": "Las estructuras de datos nos permiten organizar y manipular la información de manera eficiente. A continuación, exploraremos las principales estructuras de datos disponibles en R y cómo se utilizan en la programación.\n\n\nUn escalar es un dato individual, como un número o una palabra, que no está agrupado con otros elementos. En R, los escalares pueden ser de diferentes tipos de datos, como numéricos, lógicos o caracteres. Estos datos se utilizan cuando solo necesitamos almacenar una única observación.\n\n\n\nUn vector es una colección ordenada de elementos del mismo tipo de dato. Puede contener números, valores lógicos o caracteres. En R, los vectores son utilizados para almacenar conjuntos de datos relacionados. Por ejemplo, podemos tener un vector de edades o un vector de nombres. Los vectores son una de las estructuras de datos más utilizadas en R y nos permiten realizar operaciones y cálculos de manera eficiente.\nVectores\nConcatenación de elementos con c(): Se utiliza la función c() para concatenar elementos y crear vectores en R.\n\n\nMostrar el código\nc(0.5, 0.6, 0.25) # números decimales (double)\nc(9L, 10L, 11L, 12L, 13L) # números enteros (integer)\nc(9:13) # secuencia de números enteros (integer sequence)\nc(TRUE, FALSE, FALSE) # valores lógicos (logical)\nc(1 + 0i, 2 + 4i) # números complejos (complex)\nc(\"a\", \"b\", \"c\") # caracteres (character)\n\n\nAcciones con vectores\n\nAsignar los vectores a nombres:\nCreamos un vector llamado “dbl” que contiene los números decimales 0.5, 0.6 y 0.25.\n\n\nMostrar el código\ndbl &lt;- c(0.5, 0.6, 0.25)\n\n\nCreamos un vector llamado “chr” que contiene los caracteres “a”, “b” y “c”.\n\n\nMostrar el código\nchr &lt;- c(\"a\", \"b\", \"c\")\n\n\nImprimir los vectores “dbl” y “chr” en la consola:\nVisualizamos en la consola el contenido del vector “dbl”, que son los números decimales 0.5, 0.6 y 0.25.\n\n\nMostrar el código\ndbl\n\n\nVisualizamos en la consola el contenido del vector “chr”, que son los caracteres “a”, “b” y “c”.\n\n\nMostrar el código\nchr\n\n\nVerificar el número de elementos en “dbl” y “chr”:\nCalculamos y mostramos en la consola la longitud del vector “dbl”, que es 3.\n\n\nMostrar el código\nlength(dbl)\n\n\nCalculamos y mostramos en la consola la longitud del vector “chr”, que es 3.\n\n\nMostrar el código\nlength(chr)\n\n\nVerificar el tipo de dato de “dbl” y “chr”:\nVisualizamos en la consola el tipo de dato del vector “dbl”, que es “double” (números decimales).\n\n\nMostrar el código\ntypeof(dbl)\n\n\nVisualizamos en la consola el tipo de dato del vector “chr”, que es “character” (caracteres).\n\n\nMostrar el código\ntypeof(chr)\n\n\nCombinar dos vectores:\nSe puede combinar el vector “dbl” consigo mismo utilizando la función “c()”, creando un nuevo vector que contiene los elementos duplicados del vector original.\n\n\nMostrar el código\nc(dbl, dbl)\n\n\nTambien se puede combina el vector “dbl” con el vector “chr” utilizando la función “c()”, creando un nuevo vector que contiene los elementos de ambos vectores concatenados.\n\n\nMostrar el código\nc(dbl, chr)\n\n\n\n\n\n\n\n\n\nNota\n\n\n\nEl cambio automático del tipo de datos del vector resultante se denomina coerción. La coerción garantiza que se mantiene el mismo tipo de datos para cada elemento del vector.\n\n\nOperaciones aritméticas con vectores\n\nDefinamos dos nuevos vectores numéricos llamados a y b con 4 elementos cada uno:\n\n\nMostrar el código\na &lt;- c(1, 2, 3, 4)\nb &lt;- c(10, 20, 30, 40)\n\n\nRealizamos una multiplicación escalar de a por 5, lo que significa que cada elemento en a se multiplica por 5:\n\n\nMostrar el código\na * 5\n\n\nRealizamos una multiplicación de vectores entre a y b, lo que implica multiplicar cada elemento en a por el elemento correspondiente en b:\n\n\nMostrar el código\na * b\n\n\nCreamos un nuevo vector numérico llamado v con longitud 5.\n\n\nMostrar el código\nv &lt;- c(1.1, 1.2, 1.3, 1.4, 1.5)\na * v\n\n\n\n\n\n\n\n\n\nNota\n\n\n\nLas operaciones aritméticas de los vectores se realizan por elementos. si dos vectores no tienen la misma longitud, el vector más corto se reciclará para que coincida con el más largo (en este caso, se vuelve a utilizar el primer elemento de a).\n\n\n\n\n\nUna matriz es una estructura bidimensional que contiene elementos organizados en filas y columnas. Todos los elementos de una matriz deben ser del mismo tipo de dato. Las matrices son útiles para almacenar datos tabulares, como una tabla de datos con variables en filas y observaciones en columnas. En R, podemos realizar operaciones matriciales y manipular los datos de manera eficiente utilizando esta estructura.\nMatrices\n\nCombinamos los vectores a y b, definidas anteriormente, por columnas utilizando la función cbind():\n\n\nMostrar el código\nA &lt;- cbind(a, b)\nA\n\n\nEsta opción combina los vectores a y b por columnas, creando una matriz A donde los elementos de a forman la primera columna y los elementos de b forman la segunda columna.\nCombinamos los vectores a y b por filas utilizando la función rbind():\n\n\nMostrar el código\nB &lt;- rbind(a, b)\nB\n\n\nEn esta opción, los vectores a y b se combinan por filas para crear una matriz B. Los elementos de a forman la primera fila y los elementos de b forman la segunda fila.\nCreamos una matriz a partir de los elementos de vector a utilizando la función matrix():\n\n\nMostrar el código\nA &lt;- matrix(a, ncol = 2, nrow = 2)\nA\n\n\nAquí se utiliza la función matrix() para crear una matriz A a partir de los elementos del vector a. Se especifica que la matriz tendrá 2 columnas y 2 filas. Los argumentos nrow y ncol indican el número de filas y el número de columnas de que consta la matriz resultante.\nPara 4 elementos y ncol =2 la matriz sólo puede tener 2 filas. Por lo tanto no es necesario especificar ambos argumentos\n\n\nMostrar el código\nA &lt;- matrix(a, ncol = 2)\nA\n\n\nEn esta variante, se crea una matriz A con 2 columnas y se ajusta automáticamente el número de filas según la longitud del vector a.\nPor defecto la matriz se rellena columna a columna (R trata internamente un objeto matriz como vector columna). si la matriz debe rellenarse fila a fila se requiere el argumento byrow = TRUE\n\n\nMostrar el código\nB &lt;- matrix(a, ncol = 2, byrow = TRUE)\nB\n\n\nEn esta opción, se crea una matriz B con 2 columnas y se especifica que los elementos del vector a se distribuirán por filas byrow = TRUE, es decir, los primeros elementos de a formarán la primera fila, los siguientes elementos formarán la segunda fila, y así sucesivamente.\n\nAcciones con matrices\n\nVerificamos el número de filas de la matriz A utilizando la función nrow():\n\n\nMostrar el código\nnrow(A)\n\n\nEsta línea de código devuelve el número de filas de la matriz A.\nVerificamos el número de columnas de la matriz A utilizando la función ncol():\n\n\nMostrar el código\nncol(A)\n\n\nAquí se obtiene el número de columnas de la matriz A.\nVerificamos la dimensión (número de filas y columnas) de la matriz A utilizando la función dim():\n\n\nMostrar el código\ndim(A)\n\n\nEsta línea de código devuelve la dimensión de la matriz A en formato [nrow, ncol].\nCombinamos dos matrices A por columnas utilizando la función cbind() y almacenamos el resultado en D.wide:\n\n\nMostrar el código\nD.wide &lt;- cbind(A, A)\nD.wide\n\n\nEn esta línea se crea una nueva matriz D.wide que combina las matrices A y A por columnas.\nCombinamos dos matrices A por filas utilizando la función rbind() y almacenamos el resultado en D.long:\n\n\nMostrar el código\nD.long &lt;- rbind(A, A)\nD.long\n\n\nAquí se crea una nueva matriz D.long que combina las matrices A y A por filas.\nCombinamos las matrices D.wide y D.long por columnas utilizando la función cbind() y almacenamos el resultado en D:\n\n\nMostrar el código\n# D &lt;- cbind(D.wide, D.long)\n\n\nEn esta línea se crea una nueva matriz D que combina las matrices D.wide y D.long por columnas.\n\nOperaciones aritméticas con matrices\n\nSuma de la matriz B consigo misma utilizando el operador +:\n\n\nMostrar el código\nB + B\n\n\nEsta línea de código realiza la suma de la matriz B con ella misma.\nMultiplicación escalar de la matriz B por 2 utilizando el operador *:\n\n\nMostrar el código\nB * 2\n\n\nAquí se realiza la multiplicación de cada elemento de la matriz B por 2.\nMultiplicación elemento a elemento de la matriz B consigo misma y almacenar el resultado en a:\n\n\nMostrar el código\na &lt;- B * B\na\n\n\nEn esta línea se realiza la multiplicación elemento a elemento de la matriz B con ella misma, y el resultado se almacena en la matriz a.\nMultiplicación de matrices utilizando el operador %*%:\n\n\nMostrar el código\nC &lt;- B %*% B\nC\n\n\nAquí se realiza la multiplicación de matrices entre la matriz B y ella misma, y el resultado se almacena en la matriz C.\n\nOtras operaciones con matrices:\n\nTransposición de la matriz D.wide utilizando la función t():\n\n\nMostrar el código\nt(D.wide)\n\n\nEsta línea de código transpone la matriz D.wide, es decir, intercambia las filas por columnas y viceversa.\nCálculo del determinante de la matriz B utilizando la función det():\n\n\nMostrar el código\ndet(B)\n\n\nAquí se calcula el determinante de la matriz B.\nCálculo de la inversa de la matriz B utilizando la función solve() (solo si el determinante es diferente de 0):\n\n\nMostrar el código\nsolve(B)\n\n\nEn esta línea se calcula la inversa de la matriz B, siempre y cuando el determinante sea diferente de 0.\nCálculo de los valores propios (eigenvalues) de una matriz cuadrada y simétrica utilizando la función eigen():\n\n\nMostrar el código\neigen(B)\n\n\nAquí se calculan los valores propios de la matriz B. Esta operación solo es aplicable a matrices cuadradas y simétricas.\n\n\n\n\nUn data frame es una estructura similar a una matriz, pero más flexible. Puede contener columnas con diferentes tipos de datos, lo que lo hace ideal para almacenar conjuntos de datos heterogéneos. Los data frames son muy utilizados en el análisis de datos, ya que nos permiten manipular y explorar datos de manera eficiente. Podemos realizar operaciones de filtrado, selección y transformación en los data frames para obtener información significativa.\nCreación del data frame:\n\nCreamos vectores con diferentes tipos de datos, como números decimales (dbl), números enteros (int), valores lógicos (lgl) y caracteres (chr):\n\n\nMostrar el código\ndbl &lt;- c(0.5, 0.6, 0.25, 1.2, 0.333) # números decimales (double)\nint &lt;- c(9L, 10L, 11L, 12L, 13L) # números enteros (integer)\nlgl &lt;- c(TRUE, FALSE, FALSE, TRUE, TRUE) # valores lógicos (logical)\nchr &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\") # caracteres (character)\n\n\nCada vector tiene elementos que representan valores de su respectivo tipo de dato.\nUtilizamos la función data.frame() para combinar los vectores en un data frame llamado df:\n\n\nMostrar el código\ndf &lt;- data.frame(dbl, int, lgl, chr)\n\n\nEl data frame df se crea utilizando los vectores dbl, int, lgl y chr como columnas.\nMostamos el contenido del data frame en la consola:\n\n\nMostrar el código\ndf\n\n\nEsto imprime el contenido del data frame df.\n\nAcciones con data frames:\n\nVerificamos el número de filas del data frame utilizando la función nrow():\n\n\nMostrar el código\nnrow(df)\n\n\nEsta línea de código devuelve el número de filas en el data frame df.\nVerificamos el número de columnas del data frame utilizando la función ncol():\n\n\nMostrar el código\nncol(df)\n\n\nAquí se obtiene el número de columnas en el data frame df.\nVerificamos la dimensión (número de filas y columnas) del data frame utilizando la función dim():\n\n\nMostrar el código\ndim(df)\n\n\nEsta línea de código devuelve la dimensión del data frame df en formato [nrow, ncol], es decir, el número de filas y columnas que tiene el data frame.\n\n\n\n\nUna lista es una estructura de datos genérica que puede contener diferentes objetos, como vectores, matrices, data frames o incluso otras listas. A diferencia de las otras estructuras, las listas no tienen restricciones en cuanto a los tipos de datos o la longitud de los componentes individuales. Las listas son muy flexibles y se utilizan cuando necesitamos almacenar objetos de diferentes tipos o estructuras complejas.\nCreación de la lista\n\nCreamos una variable a que contiene un escalar de tipo entero (1L):\n\n\nMostrar el código\na &lt;- 1L\n\n\nCreamos un vector numérico dbl con 5 elementos:\n\n\nMostrar el código\ndbl &lt;- c(0.5, 0.6, 0.25, 1.2, 0.333)\n\n\nCreamos un vector de caracteres chr con 3 elementos:\n\n\nMostrar el código\nchr &lt;- c(\"a\", \"b\", \"c\")\n\n\nCreamos un vector v con 4 elementos de tipo numérico:\n\n\nMostrar el código\nv &lt;- c(1.1, 1.2, 1.3, 1.4)\n\n\nCreamos una matriz mat de tamaño 2x2 a partir del vector v:\n\n\nMostrar el código\nmat &lt;- matrix(v, ncol = 2)\n\n\nLa matriz mat tiene 2 columnas y los elementos del vector v se llenan por columnas.\nCreamos una lista l que contiene los elementos a, dbl, chr y mat:\n\n\nMostrar el código\nl &lt;- list(a, dbl, chr, mat)\n\n\nLa lista l contiene estos elementos en ese orden.\nFinalmente, visualizamos el contenido de la lista en la consola:\n\n\nMostrar el código\nl\n\n\nEsto imprime el contenido de la lista l.\n\n\nEs importante comprender estas estructuras de datos en R, ya que nos permiten organizar y manipular la información de manera efectiva. Cada estructura tiene sus propias características y funciones asociadas que nos facilitan el trabajo con los datos en la programación."
  },
  {
    "objectID": "python/2020-06-20-configurar-entorno-virtual-python-anaconda/index.html",
    "href": "python/2020-06-20-configurar-entorno-virtual-python-anaconda/index.html",
    "title": "Configuración de entornos virtuales con Anaconda",
    "section": "",
    "text": "¡Bienvenidos al blog! En esta ocasión, exploraremos un tema fundamental para cualquier desarrollador o entusiasta de Python: la configuración de un entorno virtual utilizando Anaconda. Si alguna vez te has preguntado cómo mantener tus proyectos de Python aislados, organizados y libres de conflictos de dependencias, estás en el lugar correcto.\n¿Alguna vez has encontrado problemas al trabajar en múltiples proyectos de Python, donde las diferentes versiones de las bibliotecas y paquetes interfieren entre sí? ¡No te preocupes! Configurar un entorno virtual es la solución perfecta para mantener todo bajo control.\nImagina tener la capacidad de crear espacios de trabajo aislados y personalizados para cada proyecto, sin preocuparte por conflictos entre las versiones de las bibliotecas o paquetes. Con Anaconda, una poderosa plataforma de gestión de paquetes y ambientes virtuales, puedes lograr precisamente eso.\nEn este blog, te guiaremos paso a paso en la configuración de tu primer entorno virtual utilizando Anaconda. Aprenderás cómo crear ambientes virtuales, instalar paquetes y bibliotecas específicos, y alternar fácilmente entre ellos para cada proyecto.\nYa sea que seas un desarrollador principiante o experimentado, este blog te brindará los conocimientos necesarios para dominar el arte de la configuración de entornos virtuales con Anaconda. ¡Prepárate para simplificar tu vida como desarrollador de Python y llevar tus proyectos al siguiente nivel!\n¡Comencemos esta emocionante aventura de configuración de entornos virtuales con Anaconda!"
  },
  {
    "objectID": "python/2020-06-20-configurar-entorno-virtual-python-anaconda/index.html#cuáles-son-los-beneficios-de-trabajar-con-entornos-virtuales-en-proyectos-de-python-en-linux",
    "href": "python/2020-06-20-configurar-entorno-virtual-python-anaconda/index.html#cuáles-son-los-beneficios-de-trabajar-con-entornos-virtuales-en-proyectos-de-python-en-linux",
    "title": "Configuración de entornos virtuales con Anaconda",
    "section": "¿Cuáles son los beneficios de trabajar con entornos virtuales en proyectos de Python en Linux?",
    "text": "¿Cuáles son los beneficios de trabajar con entornos virtuales en proyectos de Python en Linux?\nPermíteme destacar algunos puntos clave:\n\nAislamiento: Los entornos virtuales te permiten tener control total sobre las versiones de las bibliotecas y paquetes que utilizas en tus proyectos. Esto significa que puedes crear un ambiente aislado para cada proyecto, evitando conflictos y problemas de compatibilidad entre diferentes versiones de Python y sus dependencias.\nPortabilidad: Al utilizar entornos virtuales, puedes compartir fácilmente tus proyectos con otros desarrolladores o ejecutarlos en diferentes máquinas sin preocuparte por las diferencias en las configuraciones del sistema. Todo lo que necesitas es compartir el archivo de requisitos del entorno virtual y cualquiera podrá recrear el mismo ambiente de trabajo en su propia máquina.\nMantenimiento sencillo: Los entornos virtuales facilitan la gestión de tus proyectos. Puedes instalar y actualizar paquetes de forma independiente dentro de cada ambiente virtual, sin afectar a otros proyectos o al sistema operativo en sí. Además, si algo sale mal en un entorno virtual, puedes solucionarlo sin que afecte a tus otros proyectos.\nExperimentación segura: Si quieres probar una nueva biblioteca o una versión diferente de una dependencia en particular, un entorno virtual te proporciona un espacio seguro para hacerlo. Puedes instalar y probar nuevas bibliotecas sin preocuparte de que afecten a otros proyectos o rompan la funcionalidad existente."
  },
  {
    "objectID": "python/2020-06-20-configurar-entorno-virtual-python-anaconda/index.html#uso-de-conda-install",
    "href": "python/2020-06-20-configurar-entorno-virtual-python-anaconda/index.html#uso-de-conda-install",
    "title": "Configuración de entornos virtuales con Anaconda",
    "section": "Uso de conda install",
    "text": "Uso de conda install\n\nAsegúrate de tener tu entorno virtual activado. Si aún no lo has hecho, consulta el artículo anterior para aprender cómo activar tu entorno virtual específico.\nAbre tu terminal o línea de comandos y ejecuta el siguiente comando para instalar un paquete desde el repositorio de Anaconda:\nconda install nombre_del_paquete\nAsegúrate de reemplazar “nombre_del_paquete” con el nombre real del paquete que deseas instalar.\nConda buscará el paquete en el repositorio de Anaconda y gestionará las dependencias automáticamente. Sigue las instrucciones en la terminal para confirmar la instalación."
  },
  {
    "objectID": "python/2020-06-20-configurar-entorno-virtual-python-anaconda/index.html#uso-de-pip-install",
    "href": "python/2020-06-20-configurar-entorno-virtual-python-anaconda/index.html#uso-de-pip-install",
    "title": "Configuración de entornos virtuales con Anaconda",
    "section": "Uso de pip install",
    "text": "Uso de pip install\n\nAl igual que antes, asegúrate de tener tu entorno virtual activado.\nEjecuta el siguiente comando en tu terminal para instalar un paquete desde el Python Package Index (PyPI):\npip install nombre_del_paquete\nAsegúrate de reemplazar “nombre_del_paquete” con el nombre real del paquete que deseas instalar.\nPip descargará el paquete desde PyPI y lo instalará en tu entorno virtual. Si el paquete tiene dependencias, pip también se encargará de resolverlas.\n\nConda es especialmente útil para instalar paquetes que son parte del repositorio de Anaconda, mientras que pip es más adecuado para paquetes que se encuentran en PyPI. Ambas herramientas son poderosas y te permiten acceder a una amplia gama de paquetes y bibliotecas para tus proyectos."
  },
  {
    "objectID": "python/2020-06-20-configurar-entorno-virtual-python-anaconda/index.html#ver-información-del-paquete-de-entorno",
    "href": "python/2020-06-20-configurar-entorno-virtual-python-anaconda/index.html#ver-información-del-paquete-de-entorno",
    "title": "Configuración de entornos virtuales con Anaconda",
    "section": "Ver información del paquete de entorno:",
    "text": "Ver información del paquete de entorno:\nPara ver todos los paquetes instalados en el entorno actual, puedes utilizar el siguiente comando:\nconda list\nAl ejecutar este comando en el Anaconda Prompt, se mostrará una lista de todos los paquetes instalados en el entorno activo. Esto te permitirá conocer los paquetes y sus respectivas versiones que están disponibles en ese entorno."
  },
  {
    "objectID": "python/2020-06-20-configurar-entorno-virtual-python-anaconda/index.html#importar-y-exportar-entornos",
    "href": "python/2020-06-20-configurar-entorno-virtual-python-anaconda/index.html#importar-y-exportar-entornos",
    "title": "Configuración de entornos virtuales con Anaconda",
    "section": "Importar y exportar entornos:",
    "text": "Importar y exportar entornos:\nSi deseas exportar la información del paquete del entorno actual, puedes utilizar el siguiente comando:\nconda env export &gt; environment.yaml\nEste comando guarda la información del paquete en un archivo YAML llamado “environment.yaml”. El archivo contendrá la lista de paquetes y sus versiones que están instalados en el entorno actual.\nEsta funcionalidad es útil cuando necesitas recrear el mismo entorno virtual en otro lugar. Para crear un nuevo entorno virtual utilizando el archivo de configuración, puedes utilizar el siguiente comando:\nconda env create -f environment.yaml\nEste comando creará un nuevo entorno virtual utilizando el archivo de configuración “environment.yaml”. El nuevo entorno tendrá los mismos paquetes y versiones que el entorno original, lo que facilita la replicación del mismo entorno en diferentes sistemas.\nEstos pasos son útiles para compartir y recrear entornos virtuales con la misma configuración, lo que asegura que todos los paquetes necesarios estén disponibles."
  },
  {
    "objectID": "SECURITY.html",
    "href": "SECURITY.html",
    "title": "Security Policy",
    "section": "",
    "text": "Use this section to tell people about which versions of your project are currently being supported with security updates.\n\n\n\nVersion\nSupported\n\n\n\n\n5.1.x\n:white_check_mark:\n\n\n5.0.x\n:x:\n\n\n4.0.x\n:white_check_mark:\n\n\n&lt; 4.0\n:x:\n\n\n\n\n\n\nUse this section to tell people how to report a vulnerability.\nTell them where to go, how often they can expect to get an update on a reported vulnerability, what to expect if the vulnerability is accepted or declined, etc."
  },
  {
    "objectID": "SECURITY.html#supported-versions",
    "href": "SECURITY.html#supported-versions",
    "title": "Security Policy",
    "section": "",
    "text": "Use this section to tell people about which versions of your project are currently being supported with security updates.\n\n\n\nVersion\nSupported\n\n\n\n\n5.1.x\n:white_check_mark:\n\n\n5.0.x\n:x:\n\n\n4.0.x\n:white_check_mark:\n\n\n&lt; 4.0\n:x:"
  },
  {
    "objectID": "SECURITY.html#reporting-a-vulnerability",
    "href": "SECURITY.html#reporting-a-vulnerability",
    "title": "Security Policy",
    "section": "",
    "text": "Use this section to tell people how to report a vulnerability.\nTell them where to go, how often they can expect to get an update on a reported vulnerability, what to expect if the vulnerability is accepted or declined, etc."
  },
  {
    "objectID": "python/2020-06-19-instalacion-de-anaconda/index.html",
    "href": "python/2020-06-19-instalacion-de-anaconda/index.html",
    "title": "Instalación de Anaconda en Ubuntu Linux",
    "section": "",
    "text": "La instalación de Anaconda en Ubuntu Linux es un paso crucial para aquellos que desean aprovechar al máximo el desarrollo en Python en este sistema operativo. Anaconda, una plataforma de gestión de paquetes y entornos virtuales, ofrece una amplia gama de herramientas y bibliotecas que facilitan el trabajo con Python, así como con otros lenguajes de programación populares. Al instalar Anaconda en Ubuntu Linux, los desarrolladores obtienen una solución integral que simplifica el proceso de configuración y administración de su entorno de desarrollo.\nLa importancia de la instalación de Anaconda en Ubuntu Linux radica en su capacidad para proporcionar un flujo de trabajo fluido y eficiente. Al ofrecer una amplia selección de paquetes precompilados, Anaconda elimina la necesidad de buscar e instalar manualmente cada biblioteca requerida. Esto ahorra tiempo y evita posibles conflictos de dependencia, permitiendo a los desarrolladores centrarse en la programación en lugar de la configuración del entorno.\nAdemás de su conveniencia, Anaconda también ofrece beneficios significativos en términos de gestión de entornos virtuales. Con la ayuda de la herramienta “conda”, los desarrolladores pueden crear y administrar fácilmente entornos aislados para proyectos específicos. Esto permite mantener diferentes versiones de paquetes y bibliotecas para cada proyecto, evitando conflictos y facilitando la replicación del entorno de desarrollo en diferentes sistemas.\n¡Sumérgete en el mundo de Anaconda y descubre cómo simplificar y mejorar tu experiencia de desarrollo en Python en Ubuntu Linux!"
  },
  {
    "objectID": "python/2020-06-19-instalacion-de-anaconda/index.html#descargar-el-instalador-de-anaconda",
    "href": "python/2020-06-19-instalacion-de-anaconda/index.html#descargar-el-instalador-de-anaconda",
    "title": "Instalación de Anaconda en Ubuntu Linux",
    "section": "Descargar el instalador de Anaconda",
    "text": "Descargar el instalador de Anaconda\nPaso 1: Accede al sitio web oficial de Anaconda. Puedes hacerlo abriendo tu navegador web favorito y dirigiéndote a Anaconda.com. Una vez allí, busca la sección de descargas.\nPaso 2: En la sección de descargas, encontrarás diferentes opciones de Anaconda según tu sistema operativo. Como estamos trabajando en Ubuntu Linux, asegúrate de seleccionar la versión adecuada para Linux.\nPaso 3: Una vez que hayas seleccionado la versión de Linux, verás dos opciones: Anaconda Individual Edition y Anaconda Enterprise. Para la mayoría de los casos, Anaconda Individual Edition es la opción recomendada, ya que es una versión gratuita y completa de Anaconda. Haz clic en el botón de descarga correspondiente a la edición que deseas instalar.\nPaso 4: La descarga comenzará y, dependiendo de la velocidad de tu conexión a Internet, podría llevar algunos minutos. Asegúrate de esperar hasta que la descarga se complete antes de pasar al siguiente paso.\nAhora que has descargado el instalador de Anaconda en tu sistema Ubuntu Linux, es hora de abrir la terminal y ejecutar algunos comandos para continuar con el proceso de instalación. ¡No te preocupes, te guiaré paso a paso!\nPaso 5: Abre la terminal. Puedes hacerlo de diferentes maneras, pero una forma común es presionar las teclas Ctrl + Alt + T al mismo tiempo. Esto abrirá una nueva ventana de terminal en tu pantalla.\nPaso 6: Una vez que tengas la terminal abierta, es importante asegurarte de que estás ubicado en el directorio correcto. Para hacerlo, ejecuta el comando “pwd” y presiona Enter. Esto te mostrará la ruta actual en la que te encuentras. Asegúrate de estar en el lugar adecuado antes de continuar.\nPaso 7: Ahora, necesitamos navegar a la ubicación donde se encuentra el instalador de Anaconda que descargaste. Por lo general, se guarda en la carpeta “Downloads” (Descargas). Para acceder a esta carpeta, ejecuta el siguiente comando:\ncd Downloads/\nPresiona Enter después de escribir el comando y verás que la ruta de la terminal cambia al directorio “Downloads”.\nPaso 8: ¡Estamos casi listos para ejecutar el instalador de Anaconda! Ahora, debes ejecutar el archivo de instalación. Asegúrate de que el nombre del archivo coincida con el que descargaste. Para ejecutarlo, utiliza el siguiente comando:\nbash nombre-del-archivo.sh\nReemplaza “nombre-del-archivo” con el nombre exacto del archivo de instalación que descargaste. Por ejemplo, si el archivo se llama “Anaconda3-2021.05-Linux-x86_64.sh”, el comando sería:\nbash Anaconda3-2021.05-Linux-x86_64.sh\nPresiona Enter y comenzará el proceso de instalación de Anaconda. Sigue las instrucciones que aparecerán en la terminal y asegúrate de leer y aceptar los términos de licencia.\nPaso 9: ¡Genial! Ahora que has ejecutado el instalador de Anaconda en Ubuntu Linux, solo te queda seguir las instrucciones de instalación que aparecerán en la terminal. No te preocupes, te guiaré a través de este paso.\nDespués de ejecutar el comando para iniciar la instalación, verás que aparecerá una serie de instrucciones en la terminal. Lee cuidadosamente cada paso y asegúrate de seguirlos correctamente.\nPor lo general, las instrucciones te pedirán que revises y aceptes los términos de licencia. Para hacerlo, simplemente lee los términos y condiciones que se muestran en la terminal y, cuando se te solicite, presiona Enter para avanzar y aceptar los términos.\nA continuación, se te pedirá que especifiques la ubicación de la instalación de Anaconda. Por defecto, suele ser en tu directorio de inicio, pero puedes elegir una ubicación diferente si lo deseas. Si no estás seguro, te recomendaría que aceptes la ubicación predeterminada presionando Enter.\nLuego, la instalación te preguntará si deseas agregar Anaconda a tu variable de entorno PATH. Esto es útil para que puedas acceder a los comandos de Anaconda desde cualquier ubicación en tu sistema. Te sugeriría que respondas “yes” (sí) y presiones Enter.\nCuando la carpeta de anaconda ya existe, actualizamos programas existente.\nbash Anaconda3-2021.11-Linux-x86_64.sh -u \nDespués de eso, la instalación continuará y verás una barra de progreso que indica el avance del proceso. Puede llevar algún tiempo, así que ten paciencia.\nUna vez que la instalación se complete con éxito, verás un mensaje indicando que Anaconda se ha instalado correctamente. ¡Felicidades! Has instalado Anaconda en tu sistema Ubuntu Linux.\nAhora puedes cerrar la terminal y comenzar a disfrutar de las ventajas de utilizar Anaconda en tu sistema. Recuerda que Anaconda te ofrece un entorno de gestión de paquetes y entornos virtuales que te facilitará el trabajo con Python y otras herramientas de ciencia de datos.\nPaso 10: Una vez que hayas instalado Anaconda en tu sistema Ubuntu Linux, es importante añadirlo al PATH del sistema para que puedas acceder a los comandos de Anaconda desde cualquier ubicación en tu sistema. Te guiaré a través de este paso.\n\nAbre la terminal en tu sistema Ubuntu Linux. Puedes hacerlo buscando “Terminal” en el menú de aplicaciones o usando el atajo de teclado Ctrl+Alt+T.\nEn la terminal, escribe el siguiente comando para abrir el archivo de configuración de inicio de sesión:\nnano ~/.bashrc\nEsto abrirá el archivo .bashrc en el editor de texto nano. Ahora, desplázate hasta el final del archivo.\nEn la última línea del archivo, añade el siguiente comando para agregar Anaconda al PATH:\nexport PATH=\"/ruta/donde/instalaste/anaconda/bin:$PATH\"\nRecuerda reemplazar “/ruta/donde/instalaste/anaconda” con la ubicación real donde instalaste Anaconda. Si elegiste la ubicación predeterminada, el comando será:\nexport PATH=\"$HOME/anaconda/bin:$PATH\"\nDespués de añadir el comando, guarda los cambios en el archivo ~/.bashrc. En nano, puedes hacerlo presionando Ctrl+O, luego presiona Enter para confirmar y finalmente presiona Ctrl+X para salir del editor nano.\nAhora, para que los cambios tengan efecto, actualiza el archivo de configuración de inicio de sesión con el siguiente comando:\nsource ~/.bashrc\n\n¡Y eso es todo! Has añadido correctamente Anaconda al PATH del sistema en Ubuntu Linux. Ahora podrás acceder a los comandos de Anaconda desde cualquier ubicación en tu sistema.\nAlgunos problemas: A veces, durante la instalación de Anaconda, puede ocurrir que no se pueda responder con “yes” al prompt de inicialización de Anaconda en el archivo .bashrc. Aquí te proporcionaré una solución detallada para abordar este problema:\n\nDespués de que la instalación de Anaconda se complete y se muestre el prompt para inicializar Anaconda en el archivo .bashrc, si no puedes responder con “yes” y el proceso se cierra, no te preocupes.\nAbre la terminal en tu sistema Ubuntu Linux. Puedes hacerlo buscando “Terminal” en el menú de aplicaciones o usando el atajo de teclado Ctrl+Alt+T.\nEn la terminal, ejecuta el siguiente comando para abrir el archivo .bashrc en un editor de texto:\nsudo gedit ~/.bashrc\nEsto abrirá el archivo .bashrc con privilegios de administrador para poder editarlo.\nDesplázate hasta el final del archivo .bashrc y agrega el siguiente bloque de código:\n# &gt;&gt;&gt; conda initialize &gt;&gt;&gt;\n!! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/home/achalmaubuntu/anaconda3/bin/conda' 'shell.bash' 'hook' 2&gt; /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n    if [ -f \"/home/achalmaubuntu/anaconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/home/achalmaubuntu/anaconda3/etc/profile.d/conda.sh\"\n    else\n        export PATH=\"/home/achalmaubuntu/anaconda3/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n# &lt;&lt;&lt; conda initialize &lt;&lt;&lt;\nRecuerda cambiar el achalmaubuntu con su usuario\nGuarda los cambios en el archivo .bashrc.\nLuego, en la terminal, ejecuta el siguiente comando para actualizar las variables de entorno con los cambios realizados en el archivo .bashrc:\nsource ~/.bashrc\n\nRecuerda reiniciar la terminal o abrir una nueva ventana de terminal para que los cambios surtan efecto.\n¡Y eso es todo! Has solucionado el problema de inicialización de Anaconda en el archivo .bashrc y ahora puedes utilizar Anaconda y sus comandos sin problemas en tu sistema Ubuntu Linux."
  },
  {
    "objectID": "python/2025-05-10-visualizacion-de-datos-con-python/index.html",
    "href": "python/2025-05-10-visualizacion-de-datos-con-python/index.html",
    "title": "Visualización de Datos con Python",
    "section": "",
    "text": "Mostrar el código\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Configurar el tamaño de la figura para mejor visualización\n#plt.figure(figsize=(10, 8))\n\n# Datos de consumo de carne bovina (kg por habitante)\nconsumo_bovino = [22.1, 22.1, 23.1, 23.9, 24.6, 21.7, 23.5, 22.0, 22.5, 23.6, 21.7]\nanios_bovino = [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011]\n\n# Datos de consumo de carne porcina (kg por habitante)\nconsumo_porcino = [17.9, 19.4, 19.1, 18.3, 19.3, 22.5, 23.5, 25.0, 24.0, 24.4, 25.6]\nanios_porcino = [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011]\n\n# Graficar consumo de carne bovina con marcadores circulares y línea discontinua\nplt.plot(anios_bovino, consumo_bovino, marker='o', linestyle='--', color='red', label='Carne Bovina')\n\n# Graficar consumo de carne porcina con marcadores de diamante y línea discontinua\nplt.plot(anios_porcino, consumo_porcino, marker='d', linestyle='--', color='blue', label='Carne Porcina')\n\n# Etiquetas de los ejes y título con formato adecuado\nplt.xlabel('Año')\nplt.ylabel('Consumo (kg por habitante)')\nplt.title('Consumo Anual de Carne en Chile (2001-2011)')\n\n# Añadir leyenda en la esquina inferior derecha\nplt.legend(loc='lower right')\n\n# Configurar marcas en el eje x para mostrar cada año\nplt.xticks(anios_bovino)\n\n# Añadir una cuadrícula para mejorar la legibilidad\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Ajustar el diseño para evitar recortes de etiquetas\nplt.tight_layout()\n\n# Guardar la figura en un archivo (opcional, se puede descomentar para usar)\n# plt.savefig('consumo_carne_chile.png')\n\n# Mostrar el gráfico\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nMostrar el código\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2 * np.pi, 200)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nMostrar el código\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigura 1: A line plot on a polar axis"
  },
  {
    "objectID": "python/2025-05-10-visualizacion-de-datos-con-python/index.html#horizontal",
    "href": "python/2025-05-10-visualizacion-de-datos-con-python/index.html#horizontal",
    "title": "Visualización de Datos con Python",
    "section": "horizontal",
    "text": "horizontal\n\n\nMostrar el código\nimport matplotlib.pyplot as plt\n\n# Configurar el tamaño de la figura para una mejor visualización\n#plt.figure(figsize=(10, 8))\n\n# Tipos de legumbres y sus respectivos consumos en kg por habitante en 2001\ntipos_legumbres = [\"Poroto\", \"Lenteja\", \"Garbanzo\", \"Arveja\"]\nconsumo_legumbres = [2.1, 1.0, 0.3, 0.5]\n\n# Crear un gráfico de barras con color personalizado y borde\nplt.bar(tipos_legumbres, consumo_legumbres, color='green', edgecolor='black', alpha=0.7)\n\n# Etiquetas de los ejes y título con formato adecuado\nplt.xlabel('Tipos de Legumbres')\nplt.ylabel('Consumo (kg por habitante)')\nplt.title('Consumo de Legumbres en Chile (2001)')\n\n# Añadir una cuadrícula en el eje y para facilitar la lectura\nplt.grid(True, axis='y', linestyle='--', alpha=0.7)\n\n# Ajustar el diseño para evitar recortes de etiquetas\nplt.tight_layout()\n\n# Guardar la figura en un archivo (opcional, descomentar para usar)\n# plt.savefig('consumo_legumbres_2001.png')\n\n# Mostrar el gráfico\nplt.show()"
  },
  {
    "objectID": "python/2025-05-10-visualizacion-de-datos-con-python/index.html#vertical",
    "href": "python/2025-05-10-visualizacion-de-datos-con-python/index.html#vertical",
    "title": "Visualización de Datos con Python",
    "section": "vertical",
    "text": "vertical\n\n\nMostrar el código\n#plt.figure(figsize=[10,8])\n#Consumo de legumbres en el 2001\nlegumbres=[\"Poroto\",\"Lenteja\",\"Garbanzo\",\"Arveja\"]\nconsumo=[2.1, 1.0, 0.3, 0.5]\n\nplt.barh(legumbres,consumo)\n\nplt.ylabel(\"Tipos de legumbre\")\nplt.xlabel(\"Consumo (kg/hab)\")\nplt.title(\"Consumo de Legumbres en el 2001\")\nplt.show()"
  },
  {
    "objectID": "r/2020-06-10-011-instalacion-de-r/index.html",
    "href": "r/2020-06-10-011-instalacion-de-r/index.html",
    "title": "Instalación de R en Linux",
    "section": "",
    "text": "En este artículo, te guiaré para descargar e instalar R y RStudio en sistema operativo Ubuntu Linux.\n\n\nPara comenzar, necesitarás descargar el paquete de instalación de R desde el sitio web oficial de R. Abre tu navegador web y sigue este enlace: Enlace de descarga de R\n\nR es un lenguaje de programación ampliamente utilizado en la comunidad estadística y de análisis de datos, y es especialmente popular entre los científicos de datos y los investigadores.\n\n\n\n\n\nLos paquetes para la versión actual de R 4.2 están disponibles para la mayoría de las versiones estables de Ubuntu Desktop. Sin embargo, solo la última versión de Soporte a Largo Plazo (LTS) cuenta con soporte completo. A partir del 2 de mayo de 2022, las versiones compatibles son:\n\nJammy Jellyfish (22.04, solo amd64)\nImpish Indri (21.10, solo amd64)\nFocal Fossa (20.04; LTS y solo amd64)\nBionic Beaver (18.04; LTS)\nXenial Xerus (16.04; LTS)\n\nEjecuta estas líneas (si eres root, omite sudo) para informar a Ubuntu sobre los binarios de R en CRAN.\n# Actualizar índices\nsudo apt update -qq\n# Instalar dos paquetes auxiliares necesarios\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# Agregar la clave de firma (de Michael Rutter) para estos repositorios\n# Para verificar la clave, ejecuta: gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# Huella digital: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# Agregar el repositorio de R 4.0 de CRAN -- ajustar 'focal' a 'groovy' o 'bionic' según sea necesario\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\nAquí utilizamos lsb_release -cs para acceder a la versión de Ubuntu que estás utilizando: “jammy”, “impish”, “focal”, “bionic”, …\nLuego, ejecuta\nsudo apt install --no-install-recommends r-base\n\n\n\nEjecuta este comando (como root o agregando sudo como prefijo) para agregar el repositorio actual de R 4.0 o posterior ‘c2d4u’:\nsudo add-apt-repository ppa:c2d4u.team/c2d4u4.0+\npara agregar el ID de clave de este repositorio, agregar el repositorio y actualizar el índice. Ahora puedes hacer apt install --no-install-recommends r-cran-rstan o apt install --no-install-recommends r-cran-tidyverse (nuevamente como usuario root o a través de sudo).\n\n\n\nPuedes descargar la última versión de RStudio desde su sitio web oficial: Enlace de descarga de RStudio\n\nRStudio RStudio es un entorno de desarrollo integrado (IDE) muy popular para trabajar con R. Proporciona una interfaz gráfica intuitiva y muchas herramientas útiles para la programación en R.\n\n\n\n\n\n\n\nAntes de instalar RStudio, es posible que debas instalar algunas dependencias en tu sistema. Abre la terminal y ejecuta los siguientes comandos para instalar las dependencias requeridas:\nsudo apt update\nsudo apt install gdebi-core\nEstos comandos actualizarán los repositorios de paquetes y luego instalarán gdebi-core, una utilidad necesaria para instalar paquetes .deb de forma sencilla y para resolver dependencias automáticamente.\n\n\n\nUna vez que hayas descargado el archivo de instalación de RStudio y hayas instalado las dependencias necesarias, puedes proceder con la instalación. Ve al directorio donde descargaste el archivo de instalación y ejecuta el siguiente comando en la terminal:\nsudo gdebi &lt;nombre_del_archivo_de_instalación&gt;.deb\nReemplaza &lt;nombre_del_archivo_de_instalación&gt; con el nombre real del archivo de instalación descargado.\nEl comando gdebi instalará RStudio y resolverá automáticamente las dependencias necesarias.\n\n\n\n\nUna vez completada la instalación, puedes iniciar RStudio desde el menú de aplicaciones de Ubuntu o ejecutando el siguiente comando en la terminal:\nrstudio\nRStudio se abrirá en una ventana separada, lo que te permitirá comenzar a trabajar con R y aprovechar todas las funciones y características que ofrece el IDE."
  },
  {
    "objectID": "r/2020-06-10-011-instalacion-de-r/index.html#paso-1.-descargar-r-en-ubuntu-linux",
    "href": "r/2020-06-10-011-instalacion-de-r/index.html#paso-1.-descargar-r-en-ubuntu-linux",
    "title": "Instalación de R en Linux",
    "section": "",
    "text": "Para comenzar, necesitarás descargar el paquete de instalación de R desde el sitio web oficial de R. Abre tu navegador web y sigue este enlace: Enlace de descarga de R\n\nR es un lenguaje de programación ampliamente utilizado en la comunidad estadística y de análisis de datos, y es especialmente popular entre los científicos de datos y los investigadores."
  },
  {
    "objectID": "r/2020-06-10-011-instalacion-de-r/index.html#paso-2.-instalar-r-en-ubuntu-linux",
    "href": "r/2020-06-10-011-instalacion-de-r/index.html#paso-2.-instalar-r-en-ubuntu-linux",
    "title": "Instalación de R en Linux",
    "section": "",
    "text": "Los paquetes para la versión actual de R 4.2 están disponibles para la mayoría de las versiones estables de Ubuntu Desktop. Sin embargo, solo la última versión de Soporte a Largo Plazo (LTS) cuenta con soporte completo. A partir del 2 de mayo de 2022, las versiones compatibles son:\n\nJammy Jellyfish (22.04, solo amd64)\nImpish Indri (21.10, solo amd64)\nFocal Fossa (20.04; LTS y solo amd64)\nBionic Beaver (18.04; LTS)\nXenial Xerus (16.04; LTS)\n\nEjecuta estas líneas (si eres root, omite sudo) para informar a Ubuntu sobre los binarios de R en CRAN.\n# Actualizar índices\nsudo apt update -qq\n# Instalar dos paquetes auxiliares necesarios\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# Agregar la clave de firma (de Michael Rutter) para estos repositorios\n# Para verificar la clave, ejecuta: gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# Huella digital: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# Agregar el repositorio de R 4.0 de CRAN -- ajustar 'focal' a 'groovy' o 'bionic' según sea necesario\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\nAquí utilizamos lsb_release -cs para acceder a la versión de Ubuntu que estás utilizando: “jammy”, “impish”, “focal”, “bionic”, …\nLuego, ejecuta\nsudo apt install --no-install-recommends r-base"
  },
  {
    "objectID": "r/2020-06-10-011-instalacion-de-r/index.html#obtén-más-de-5000-paquetes-de-cran",
    "href": "r/2020-06-10-011-instalacion-de-r/index.html#obtén-más-de-5000-paquetes-de-cran",
    "title": "Instalación de R en Linux",
    "section": "",
    "text": "Ejecuta este comando (como root o agregando sudo como prefijo) para agregar el repositorio actual de R 4.0 o posterior ‘c2d4u’:\nsudo add-apt-repository ppa:c2d4u.team/c2d4u4.0+\npara agregar el ID de clave de este repositorio, agregar el repositorio y actualizar el índice. Ahora puedes hacer apt install --no-install-recommends r-cran-rstan o apt install --no-install-recommends r-cran-tidyverse (nuevamente como usuario root o a través de sudo)."
  },
  {
    "objectID": "r/2020-06-10-011-instalacion-de-r/index.html#paso-3.-descargar-rstudio-en-ubuntu-linux",
    "href": "r/2020-06-10-011-instalacion-de-r/index.html#paso-3.-descargar-rstudio-en-ubuntu-linux",
    "title": "Instalación de R en Linux",
    "section": "",
    "text": "Puedes descargar la última versión de RStudio desde su sitio web oficial: Enlace de descarga de RStudio\n\nRStudio RStudio es un entorno de desarrollo integrado (IDE) muy popular para trabajar con R. Proporciona una interfaz gráfica intuitiva y muchas herramientas útiles para la programación en R."
  },
  {
    "objectID": "r/2020-06-10-011-instalacion-de-r/index.html#paso-4.-instalar-rstudio-en-ubuntu-linux",
    "href": "r/2020-06-10-011-instalacion-de-r/index.html#paso-4.-instalar-rstudio-en-ubuntu-linux",
    "title": "Instalación de R en Linux",
    "section": "",
    "text": "Antes de instalar RStudio, es posible que debas instalar algunas dependencias en tu sistema. Abre la terminal y ejecuta los siguientes comandos para instalar las dependencias requeridas:\nsudo apt update\nsudo apt install gdebi-core\nEstos comandos actualizarán los repositorios de paquetes y luego instalarán gdebi-core, una utilidad necesaria para instalar paquetes .deb de forma sencilla y para resolver dependencias automáticamente.\n\n\n\nUna vez que hayas descargado el archivo de instalación de RStudio y hayas instalado las dependencias necesarias, puedes proceder con la instalación. Ve al directorio donde descargaste el archivo de instalación y ejecuta el siguiente comando en la terminal:\nsudo gdebi &lt;nombre_del_archivo_de_instalación&gt;.deb\nReemplaza &lt;nombre_del_archivo_de_instalación&gt; con el nombre real del archivo de instalación descargado.\nEl comando gdebi instalará RStudio y resolverá automáticamente las dependencias necesarias."
  },
  {
    "objectID": "r/2020-06-10-011-instalacion-de-r/index.html#paso-5.-iniciar-rstudio",
    "href": "r/2020-06-10-011-instalacion-de-r/index.html#paso-5.-iniciar-rstudio",
    "title": "Instalación de R en Linux",
    "section": "",
    "text": "Una vez completada la instalación, puedes iniciar RStudio desde el menú de aplicaciones de Ubuntu o ejecutando el siguiente comando en la terminal:\nrstudio\nRStudio se abrirá en una ventana separada, lo que te permitirá comenzar a trabajar con R y aprovechar todas las funciones y características que ofrece el IDE."
  },
  {
    "objectID": "fundamentos-programacion/2019-08-13-organizando-tipos-de-archivos-de-softwares/index.html",
    "href": "fundamentos-programacion/2019-08-13-organizando-tipos-de-archivos-de-softwares/index.html",
    "title": "Tipografía en entornos académicos y de programación",
    "section": "",
    "text": "¡Absolutamente! Aquí tienes una tabla comparativa de los tipos de archivos más comunes que generan los software estadísticos y de programación que mencionaste, junto con sus funciones principales y extensiones comunes. Esta tabla te será de gran utilidad para organizar tus archivos de manera eficiente:\n\n\n\n\n\n\n\n\n\nSoftware\nTipo de Archivo\nFunción Principal\nExtensión Común\n\n\n\n\nSPSS\nDatos\nAlmacena datos para análisis\n.sav\n\n\n\nSintaxis\nContiene comandos para ejecutar análisis\n.sps\n\n\n\nSalida\nGuarda resultados de análisis\n.spv\n\n\n\nGráficos\nAlmacena gráficos generados\n.png, .jpg, .bmp\n\n\nMinitab\nProyecto\nContiene todo el proyecto, incluyendo datos, análisis y resultados\n.mpj\n\n\n\nHoja de Trabajo\nAlmacena datos para un análisis específico\n.mtw\n\n\n\nSesión\nRegistra la sesión de trabajo\n.mtw\n\n\n\nGráficos\nAlmacena gráficos generados\n.png, .jpg, .bmp\n\n\n\nMacro\nContiene comandos para automatizar tareas\n.mac\n\n\nEViews\nWorkfile\nContiene todos los objetos creados en una sesión\n.wf1\n\n\n\nPrograma\nContiene código para automatizar tareas\n.prg\n\n\n\nDatos\nAlmacena datos en formato ASCII\n.dat\n\n\n\nSerie\nAlmacena una serie de tiempo\n.ser\n\n\n\nEcuación\nAlmacena una ecuación estimada\n.equ\n\n\n\nSistema\nAlmacena un sistema de ecuaciones\n.sys\n\n\n\nGráfico\nAlmacena gráficos generados\n.wpg\n\n\nGretl\nDatos\nAlmacena datos de series de tiempo o de corte transversal\n.gdt\n\n\n\nResultados\nGuarda resultados de estimaciones\n.gph\n\n\n\nGráficos\nAlmacena gráficos generados\n.png, .jpg, .pdf\n\n\n\nScript\nContiene comandos de gretl\n.gpi\n\n\nStata\nDatos\nAlmacena datos para análisis\n.dta\n\n\n\nDo-file\nContiene comandos de Stata\n.do\n\n\n\nLog\nRegistra la ejecución de comandos\n.log\n\n\n\nResultados\nAlmacena resultados de comandos\n.smcl\n\n\n\nGráficos\nAlmacena gráficos generados\n.gph\n\n\nOctave\nDatos\nMatrices y vectores\n.mat\n\n\n\nScript\nContiene código de Octave\n.m\n\n\n\nGráficos\nAlmacena gráficos generados\n.png, .jpg, .pdf\n\n\nMATLAB\nDatos\nMatrices y vectores\n.mat\n\n\n\nScript\nContiene código de MATLAB\n.m\n\n\n\nGráficos\nAlmacena gráficos generados\n.fig, .png, .jpg, .pdf\n\n\nJulia\nDatos\nMatrices y vectores\n.jld2\n\n\n\nScript\nContiene código de Julia\n.jl\n\n\n\nGráficos\nAlmacena gráficos generados\n.png, .jpg, .pdf\n\n\nR\nDatos\nData frames\n.RData\n\n\n\nScript\nContiene código de R\n.R\n\n\n\nGráficos\nAlmacena gráficos generados\n.png, .jpg, .pdf\n\n\n\nObservaciones:\n\nExtensiones comunes: Aunque las extensiones pueden variar ligeramente entre diferentes versiones o configuraciones, las mencionadas son las más comunes.\nFormatos de datos: Muchos software pueden importar y exportar datos en diversos formatos (CSV, Excel, etc.), pero sus formatos nativos son los más eficientes.\nScripts: Los scripts son fundamentales para automatizar tareas y reproducir análisis.\nGráficos: Los gráficos suelen guardarse en formatos de imagen estándar para su inclusión en informes.\n\nRecomendaciones adicionales:\n\nOrganiza tus archivos: Crea una estructura de carpetas clara y lógica para cada proyecto.\nUtiliza nombres descriptivos: Facilita la identificación de los archivos.\nRealiza copias de seguridad: Evita la pérdida de datos importantes.\nDocumenta tu trabajo: Añade comentarios a tus scripts para explicar el código.\n\n¿Necesitas más información sobre algún software o tipo de archivo en particular?\n¡Absolutamente! Aquí tienes una matriz que agrupa las extensiones de archivo más comunes utilizadas en software estadístico, según su función principal. Ten en cuenta que algunas extensiones pueden tener usos más específicos o variar ligeramente entre diferentes versiones de software:\n\n\n\n\n\n\n\n\nFunción Principal\nExtensiones Comunes\nSoftware\n\n\n\n\nDatos\n.sav, .dta, .gdt, .mtw, .csv, .xlsx\nSPSS, Stata, Gretl, Minitab, Excel\n\n\nSintaxis/Script\n.sps, .do, .gpi, .mac, .m, .jl, .R\nSPSS, Stata, Gretl, Minitab, Octave, MATLAB, Julia, R\n\n\nResultados\n.spv, .smcl, .gph, .mtw, .txt\nSPSS, Stata, Gretl, Minitab\n\n\nGráficos\n.png, .jpg, .bmp, .pdf, .fig, .wpg\nCasi todos los software\n\n\nProyecto/Trabajo\n.mpj, .wf1\nMinitab, EViews\n\n\nSesión\n.mtw\nMinitab\n\n\nModelo/Ecuación\n.equ, .sys\nEViews\n\n\nDatos en formato binario\n.mat, .jld2, .RData\nMATLAB, Julia, R\n\n\n\nExplicación de las agrupaciones:\n\nDatos: Almacenan los conjuntos de datos utilizados para el análisis.\nSintaxis/Script: Contienen los comandos o código que se ejecutan para realizar los análisis.\nResultados: Guardan los resultados de los análisis, como tablas, estadísticas y resultados de modelos.\nGráficos: Almacenan las representaciones visuales de los datos o resultados.\nProyecto/Trabajo: Contienen toda la información relacionada con un proyecto específico, incluyendo datos, análisis y resultados.\nSesión: Registran la sesión de trabajo, incluyendo los comandos ejecutados y los resultados obtenidos.\nModelo/Ecuación: Almacenan modelos estadísticos o ecuaciones estimadas.\nDatos en formato binario: Almacenan datos en un formato optimizado para el software, a menudo utilizado para grandes conjuntos de datos o estructuras de datos complejas.\n\nObservaciones adicionales:\n\nCSV (Comma Separated Values): Es un formato de texto plano muy común para intercambiar datos entre diferentes programas.\nExcel (.xlsx): Aunque no está diseñado específicamente para análisis estadístico, se utiliza comúnmente para almacenar y manipular datos.\nOtros formatos: Existen muchos otros formatos de archivo que pueden ser utilizados, dependiendo del software y la tarea específica.\n\n¿Necesitas más detalles sobre alguna extensión en particular o sobre cómo convertir entre diferentes formatos?\nEjemplo de uso:\nSi tienes un archivo de datos en formato .csv y quieres analizarlo en SPSS, puedes importarlo a un nuevo archivo .sav. Luego, escribirías un script .sps para realizar el análisis y guardar los resultados en un archivo .spv. Finalmente, podrías exportar los gráficos generados en formato .png para incluirlos en un informe.\n¿Hay algo más que te gustaría saber sobre los archivos en software estadístico?\n¡Claro! Aquí tienes la misma opción en inglés, pero con algunas palabras más concisas y comunes en el ámbito de la programación y el análisis de datos:\nOption 2: More descriptive words:\n\nDatos: Data\nSintaxis/Script: Code\nResultados: Output\nGráficos: Graphs\nProyecto: Project\nSesión: Session\nModelo: Model\nBinario: Binary\n\nA continuación te explicamos por qué se suelen utilizar estos términos:\n\nDatos: Este es el término más directo para la información en bruto con la que estás trabajando.\nCódigo: Se refiere a las instrucciones que das al ordenador para realizar cálculos o crear visualizaciones.\nSalida: Es el resultado de ejecutar tu código, como tablas, gráficos o resultados numéricos.\nGráficos: Este es un término más general para cualquier representación visual de tus datos.\nProyecto: Se refiere a la colección general de archivos y código relacionados con un análisis específico.\nSesión: Es un registro de las acciones que realizaste durante un periodo de trabajo específico.\nModelo: Se refiere a una representación matemática de un fenómeno del mundo real.\nBinario: Se refiere a los datos almacenados en un formato binario, que a menudo se utiliza para la eficiencia.\n\n¿Quieres que te dé ejemplos de cómo utilizar estos términos en los nombres de los archivos?\nTraducción realizada con la versión gratuita del traductor DeepL.com\n\nPublicaciones Similares\nSi te interesó este artículo, te recomendamos que explores otros blogs y recursos relacionados que pueden ampliar tus conocimientos. Aquí te dejo algunas sugerencias:\n\n Typografia\n Organizando Tipos De Archivos De Softwares\n 01 Pensamiento Logico\n 02 Introduccion A Los Algoritmos\n 03 Programacion Basica En Html\n Por Editar\n\nEsperamos que encuentres estas publicaciones igualmente interesantes y útiles. ¡Disfruta de la lectura!\n\n\n\n\nReutilizaciónCC BY-SA 4.0Cómo citarPor favor, cita este trabajo como:\nAchalma, Edison. 2025. “Tipografía en entornos académicos y de\nprogramación,” January. https://achalmaedison.netlify.app/fundamentos-programacion/2019-08-13-organizando-tipos-de-archivos-de-softwares/."
  }
]